import React, { useState, forwardRef, useImperativeHandle } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Alert, Modal, FlatList, TextInput } from 'react-native';

// ConferenceBridge Component - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Conference Call
const ConferenceBridge = forwardRef(({
  endpointRef,
  accountRef,
  currentCallRef,
  currentCallNumber,
  config,
  isInCall,
  setIsInCall,
  setCallStatus,
  setCurrentCallRef,
  navigation
}, ref) => {
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Conference
  const [isInConference, setIsInConference] = useState(false);
  const [conferenceParticipants, setConferenceParticipants] = useState([]);
  const [showConferenceModal, setShowConferenceModal] = useState(false);
  const [newParticipantNumber, setNewParticipantNumber] = useState('');
  const [conferenceCallRefs, setConferenceCallRefs] = useState([]);

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    startConference,
    addParticipant,
    removeParticipant,
    endConference,
    getParticipants: () => conferenceParticipants,
    isInConference: () => isInConference,
    showModal: () => setShowConferenceModal(true),
    hideModal: () => setShowConferenceModal(false)
  }));

  // Helper function to resolve ref
  const resolve = (maybeRef) => (maybeRef && (maybeRef.current || maybeRef)) || null;

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference Call
  const startConference = async () => {
    try {
      const endpoint = resolve(endpointRef);
      const currentCall = resolve(currentCallRef);
      
      if (!endpoint || !currentCall) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏´‡∏£‡∏∑‡∏≠ call ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
      }

      console.log('üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference Call...');
      
      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ current call ‡πÄ‡∏Ç‡πâ‡∏≤ conference bridge ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const bridgeConnected = await connectToConferenceBridge(
        currentCall, 
        currentCall._callId || currentCall.id || 'current'
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° current call ‡πÄ‡∏õ‡πá‡∏ô participant ‡πÅ‡∏£‡∏Å
      const participants = [{
        id: currentCall._callId || currentCall.id || 'current',
        number: currentCallNumber || currentCall.remoteContact || currentCall.remoteNumber || '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        callRef: currentCall,
        status: 'connected',
        isBridgeConnected: bridgeConnected
      }];

      setConferenceParticipants(participants);
      setConferenceCallRefs([currentCall]);
      setIsInConference(true);
      setShowConferenceModal(true); // ‡πÅ‡∏™‡∏î‡∏á modal ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° conference
      setCallStatus(bridgeConnected ? 
        'üìû Conference Call ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°' : 
        'üìû Conference Call ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô'
      );
      
      console.log('‚úÖ Conference Call ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error starting conference:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference Call ‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference
  const addParticipant = async (phoneNumber) => {
    try {
      const endpoint = resolve(endpointRef);
      const account = resolve(accountRef);
      
      if (!endpoint || !account) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏´‡∏£‡∏∑‡∏≠ account');
      }

      if (!phoneNumber || phoneNumber.trim() === '') {
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
      }

      console.log(`üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference: ${phoneNumber}`);
      setCallStatus(`üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${phoneNumber} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference...`);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      Alert.alert(
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference',
        `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${phoneNumber}\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...`,
        [{ text: '‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö', style: 'default' }]
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á call ‡πÉ‡∏´‡∏°‡πà
      const newCall = await endpoint.makeCall(account, phoneNumber);
      
      if (newCall) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô participants list
        const newParticipant = {
          id: newCall._callId || newCall.id || Date.now().toString(),
          number: phoneNumber,
          callRef: newCall,
          status: 'calling'
        };

        setConferenceParticipants(prev => [...prev, newParticipant]);
        setConferenceCallRefs(prev => [...prev, newCall]);

        // ‡∏ï‡∏±‡πâ‡∏á listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö call state changes
        if (newCall.on && typeof newCall.on === 'function') {
          newCall.on('call_changed', async (call) => {
            updateParticipantStatus(newParticipant.id, call.state);
            
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ call ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° conference bridge ‡πÅ‡∏•‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            if (call.state === 'PJSIP_INV_STATE_CONFIRMED') {
              await connectToConferenceBridge(newCall, newParticipant.id);
              // ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Å‡∏±‡∏ô
              setTimeout(() => syncAllParticipants(), 1000);
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              Alert.alert(
                '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ',
                `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${phoneNumber} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`,
                [{ text: '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!', style: 'default' }]
              );
            }
          });
        }

        setCallStatus(`üìû ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${phoneNumber} ‡πÉ‡∏ô Conference ‡πÅ‡∏•‡πâ‡∏ß`);
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${phoneNumber}`);
        
        return newCall;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á call ‡πÑ‡∏î‡πâ');
      }
      
    } catch (error) {
      console.error('‚ùå Error adding participant:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ: ${error.message}`);
      return null;
    }
  };

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢)
  const connectToConferenceBridge = async (callRef, participantId) => {
    try {
      const endpoint = resolve(endpointRef);
      
      if (!endpoint) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Conference');
        return false;
      }

      if (!callRef) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö call reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Conference');
        return false;
      }

      const safePId = participantId || 'unknown';
      console.log(`üéØ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge...`);

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ PJSIP Conference Bridge
      if (endpoint.conferenceConnect && typeof endpoint.conferenceConnect === 'function') {
        try {
          // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ call ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö conference bridge
          await endpoint.conferenceConnect(callRef);
          console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1)`);
          return true;
        } catch (error) {
          console.log(`‚ùå Conference connect ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ Mixed Audio Bridge
      if (endpoint.addToConference && typeof endpoint.addToConference === 'function') {
        try {
          await endpoint.addToConference(callRef);
          console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)`);
          return true;
        } catch (error) {
          console.log(`‚ùå Add to conference ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: Manual Conference Setup - ‡πÑ‡∏°‡πà‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢
      if (callRef.setConferenceMode && typeof callRef.setConferenceMode === 'function') {
        try {
          await callRef.setConferenceMode(true);
          console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3)`);
          return true;
        } catch (error) {
          console.log(`‚ùå Set conference mode ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: PJSIP Media Bridge
      if (endpoint.createMediaBridge && typeof endpoint.createMediaBridge === 'function') {
        try {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á media bridge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö conference
          if (!endpoint._conferenceBridge) {
            endpoint._conferenceBridge = await endpoint.createMediaBridge();
          }
          
          // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ call ‡πÄ‡∏Ç‡πâ‡∏≤ media bridge
          await endpoint.connectToMediaBridge(callRef, endpoint._conferenceBridge);
          console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Media Bridge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4)`);
          return true;
        } catch (error) {
          console.log(`‚ùå Media bridge ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: Simple Conference - ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô
      try {
        console.log(`üîß ‡πÉ‡∏ä‡πâ Simple Conference mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${safePId}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ call ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        const callState = callRef.state || callRef.callState || 'unknown';
        console.log(`üìû Call state: ${callState}`);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ call ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà
        if (callRef.unhold && typeof callRef.unhold === 'function') {
          try {
            await callRef.unhold();
            console.log(`‚úÖ Unhold call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${safePId}`);
          } catch (unholdError) {
            console.log(`‚ö†Ô∏è Unhold call ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${unholdError.message}`);
          }
        }
        
        if (callRef.unmute && typeof callRef.unmute === 'function') {
          try {
            await callRef.unmute();
            console.log(`‚úÖ Unmute call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${safePId}`);
          } catch (unmuteError) {
            console.log(`‚ö†Ô∏è Unmute call ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${unmuteError.message}`);
          }
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ audio route ‡πÑ‡∏õ‡∏¢‡∏±‡∏á speaker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô
        if (endpoint.setAudioRoute && typeof endpoint.setAudioRoute === 'function') {
          try {
            await endpoint.setAudioRoute('speaker');
            console.log(`‚úÖ Set audio route ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${safePId}`);
          } catch (audioError) {
            console.log(`‚ö†Ô∏è Set audio route ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${audioError.message}`);
          }
        }

        console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Simple Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5)`);
        return true;
      } catch (error) {
        console.log(`‚ùå Simple conference ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
      }

      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${safePId} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference Bridge ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏î‡πÜ`);
      return false;
      
    } catch (error) {
      console.error('‚ùå Error connecting to conference bridge:', error);
      return false;
    }
  };

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Conference (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Å‡∏±‡∏ô)
  const setupConferenceAudio = async () => {
    try {
      const endpoint = resolve(endpointRef);
      
      if (!endpoint) {
        console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
        return false;
      }

      console.log('üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Conference...');

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Speaker Phone Mode
      if (endpoint.setSpeakerphone && typeof endpoint.setSpeakerphone === 'function') {
        try {
          await endpoint.setSpeakerphone(true);
          console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Speaker Phone ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Speaker Phone ‡πÑ‡∏î‡πâ:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio Route
      if (endpoint.setAudioRoute && typeof endpoint.setAudioRoute === 'function') {
        try {
          await endpoint.setAudioRoute('speaker');
          console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio Route ‡πÄ‡∏õ‡πá‡∏ô Speaker ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Audio Route ‡πÑ‡∏î‡πâ:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏õ‡∏¥‡∏î Conference Audio Mode
      if (endpoint.setConferenceAudioMode && typeof endpoint.setConferenceAudioMode === 'function') {
        try {
          await endpoint.setConferenceAudioMode(true);
          console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Conference Audio Mode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Conference Audio Mode ‡πÑ‡∏î‡πâ:', error.message);
        }
      }

      return true;
    } catch (error) {
      console.error('‚ùå Error setting up conference audio:', error);
      return false;
    }
  };

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å call ‡πÄ‡∏Ç‡πâ‡∏≤ conference bridge ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
  const syncAllParticipants = async () => {
    try {
      console.log('üéØ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Conference...');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö conference
      await setupConferenceAudio();

      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å call ‡πÄ‡∏Ç‡πâ‡∏≤ conference bridge
      const syncPromises = conferenceCallRefs.map(async (callRef, index) => {
        try {
          const participantId = callRef._callId || callRef.id || `participant_${index}`;
          await connectToConferenceBridge(callRef, participantId);
          return true;
        } catch (error) {
          console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå participant ${index}:`, error);
          return false;
        }
      });

      const results = await Promise.all(syncPromises);
      const successCount = results.filter(result => result).length;
      
      console.log(`‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount}/${results.length} ‡∏Ñ‡∏ô`);
      
      setCallStatus(`üìû Conference: ${successCount} ‡∏Ñ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß`);
      return successCount > 0;
      
    } catch (error) {
      console.error('‚ùå Error syncing participants:', error);
      return false;
    }
  };

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
  const updateParticipantStatus = (participantId, callState) => {
    setConferenceParticipants(prev => 
      prev.map(participant => {
        if (participant.id === participantId) {
          let status = 'calling';
          
          switch (callState) {
            case 'PJSIP_INV_STATE_CONFIRMED':
              status = 'connected';
              break;
            case 'PJSIP_INV_STATE_DISCONNECTED':
              status = 'disconnected';
              break;
            case 'PJSIP_INV_STATE_CALLING':
              status = 'calling';
              break;
            default:
              status = 'unknown';
          }
          
          return { ...participant, status };
        }
        return participant;
      })
    );
  };

  // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference
  const removeParticipant = async (participantId) => {
    try {
      const participant = conferenceParticipants.find(p => p.id === participantId);
      if (!participant) {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${participantId}`);
        return false;
      }

      console.log(`üéØ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference: ${participant.number}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
      if (participant.callRef) {
        try {
          if (typeof participant.callRef.hangup === 'function') {
            await participant.callRef.hangup();
          } else {
            const endpoint = resolve(endpointRef);
            if (endpoint && typeof endpoint.hangupCall === 'function') {
              await endpoint.hangupCall(participant.callRef);
            } else {
              console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô hangup');
            }
          }
        } catch (hangupError) {
          console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢: ${hangupError.message}`);
          // ‡πÑ‡∏°‡πà throw error ‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
        }
      } else {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ callRef ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ');
      }

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
      setConferenceParticipants(prev => prev.filter(p => p.id !== participantId));
      setConferenceCallRefs(prev => prev.filter(call => {
        const callId = call._callId || call.id;
        return callId !== participantId;
      }));

      setCallStatus(`üìû ‡∏•‡∏ö ${participant.number} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡πÅ‡∏•‡πâ‡∏ß`);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${participant.number}`);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Error removing participant:', error);
      setCallStatus(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏à‡∏ö Conference Call
  const endConference = async () => {
    try {
      console.log('üéØ ‡∏à‡∏ö Conference Call...');

      // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
      const hangupPromises = conferenceCallRefs.map(async (call, index) => {
        try {
          if (!call) {
            console.log(`‚ö†Ô∏è Call ${index} is null/undefined, skipping`);
            return;
          }

          const callId = call._callId || call.id || `call_${index}`;
          console.log(`üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢ call ID: ${callId}`);

          if (typeof call.hangup === 'function') {
            await call.hangup();
          } else {
            const endpoint = resolve(endpointRef);
            if (endpoint && typeof endpoint.hangupCall === 'function') {
              await endpoint.hangupCall(call);
            } else {
              console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢ call ID: ${callId} - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô hangup`);
            }
          }
        } catch (error) {
          console.error(`‚ùå Error hanging up call ${index}:`, error.message);
          // ‡πÑ‡∏°‡πà throw error ‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
        }
      });

      await Promise.all(hangupPromises);

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
      setIsInConference(false);
      setConferenceParticipants([]);
      setConferenceCallRefs([]);
      setCurrentCallRef(null);
      setIsInCall(false);
      setCallStatus('üìû Conference Call ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      setShowConferenceModal(false);

      console.log('‚úÖ ‡∏à‡∏ö Conference Call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error ending conference:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏ö Conference Call ‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // Handle ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ú‡πà‡∏≤‡∏ô UI
  const handleAddParticipant = async () => {
    if (!newParticipantNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
      return;
    }

    const result = await addParticipant(newParticipantNumber.trim());
    if (result) {
      setNewParticipantNumber('');
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô Conference
  const addCurrentNumberToConference = () => {
    if (currentCallNumber && !conferenceParticipants.some(p => p.number === currentCallNumber)) {
      const currentParticipant = {
        id: `current_${Date.now()}`,
        number: currentCallNumber,
        callRef: currentCallRef,
        status: 'connected'
      };
      
      setConferenceParticipants(prev => [currentParticipant, ...prev]);
      
      Alert.alert(
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${currentCallNumber} ‡πÄ‡∏Ç‡πâ‡∏≤ Conference ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Conference Call ‡πÑ‡∏î‡πâ`,
        [{ text: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß', style: 'default' }]
      );
    }
  };

  // Render participant item
  const renderParticipant = ({ item }) => (
    <View style={styles.participantItem}>
      <View style={styles.participantInfo}>
        <View style={styles.participantMainInfo}>
          <Text style={styles.participantNumberDisplay}>{item.number}</Text>
          <Text style={[styles.participantStatus, 
            item.status === 'connected' && styles.statusConnected,
            item.status === 'calling' && styles.statusCalling,
            item.status === 'disconnected' && styles.statusDisconnected
          ]}>
            {item.status === 'connected' ? 'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : 
             item.status === 'calling' ? 'üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å...' : 
             item.status === 'disconnected' ? 'üî¥ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' : '‚ö™ ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
          </Text>
        </View>
        {item.status === 'connected' && (
          <View style={styles.participantConnectedBadge}>
            <Text style={styles.participantJoinedText}>‚úì ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Conference</Text>
          </View>
        )}
      </View>
      
      {item.status !== 'disconnected' && (
        <TouchableOpacity
          style={styles.removeButton}
          onPress={() => {
            Alert.alert(
              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
              `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${item.number} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
              [
                { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
                { text: '‡∏•‡∏ö', style: 'destructive', onPress: () => removeParticipant(item.id) }
              ]
            );
          }}
        >
          <Text style={styles.removeButtonText}>üóëÔ∏è</Text>
        </TouchableOpacity>
      )}
    </View>
  );

  return (
    <Modal
      visible={showConferenceModal}
      transparent={true}
      animationType="slide"
      onRequestClose={() => setShowConferenceModal(false)}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          
          {/* Header */}
          <View style={styles.header}>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Conference Call</Text>
              {currentCallNumber && (
                <Text style={styles.currentCallInfo}>
                  üéØ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {currentCallNumber}
                </Text>
              )}
              <Text style={styles.subtitle}>
                {conferenceParticipants.length === 0 ? 
                  '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° Conference' :
                  `üìä ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${conferenceParticipants.length} ‡∏Ñ‡∏ô | ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${conferenceParticipants.filter(p => p.status === 'connected').length} ‡∏Ñ‡∏ô`
                }
              </Text>
            </View>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setShowConferenceModal(false)}
            >
              <Text style={styles.closeButtonText}>‚úï</Text>
            </TouchableOpacity>
          </View>

          {/* Add Participant */}
          <View style={styles.addParticipantSection}>
            <TextInput
              style={styles.numberInput}
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              value={newParticipantNumber}
              onChangeText={setNewParticipantNumber}
              keyboardType="phone-pad"
            />
            <TouchableOpacity style={styles.addButton} onPress={handleAddParticipant}>
              <Text style={styles.addButtonText}>‡πÄ‡∏û‡∏¥‡πà‡∏°</Text>
            </TouchableOpacity>
          </View>

          {/* Quick Add Current Number */}
          {currentCallNumber && !conferenceParticipants.some(p => p.number === currentCallNumber) && (
            <View style={styles.quickAddSection}>
              <Text style={styles.quickAddLabel}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡πá‡∏ß:</Text>
              <TouchableOpacity
                style={styles.quickAddButton}
                onPress={addCurrentNumberToConference}
              >
                <Text style={styles.quickAddButtonText}>
                  ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({currentCallNumber}) ‡πÄ‡∏Ç‡πâ‡∏≤ Conference
                </Text>
              </TouchableOpacity>
            </View>
          )}

          {/* Participants List */}
          <View style={styles.participantsSection}>
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>
                ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference ({conferenceParticipants.length} ‡∏Ñ‡∏ô)
              </Text>
              {conferenceParticipants.length > 0 && (
                <View style={styles.participantsSummary}>
                  <Text style={styles.summaryText}>
                    üìû ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: {conferenceParticipants.map(p => p.number).join(', ')}
                  </Text>
                  <Text style={styles.connectedCount}>
                    üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: {conferenceParticipants.filter(p => p.status === 'connected').length} ‡∏Ñ‡∏ô
                  </Text>
                </View>
              )}
            </View>
            
            {conferenceParticipants.length === 0 ? (
              <Text style={styles.noParticipantsText}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference</Text>
            ) : (
              <FlatList
                data={conferenceParticipants}
                renderItem={renderParticipant}
                keyExtractor={(item) => item.id}
                style={styles.participantsList}
                showsVerticalScrollIndicator={false}
              />
            )}
          </View>

          {/* Control Buttons */}
          <View style={styles.controlButtons}>
            <TouchableOpacity
              style={[styles.controlButton, styles.endButton]}
              onPress={() => {
                Alert.alert(
                  '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏ö Conference',
                  '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏ö Conference Call ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                  [
                    { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
                    { text: '‡∏à‡∏ö', style: 'destructive', onPress: endConference }
                  ]
                );
              }}
            >
              <Text style={styles.endButtonText}>‡∏à‡∏ö Conference</Text>
            </TouchableOpacity>
          </View>

        </View>
      </View>
    </Modal>
  );
});

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    maxHeight: '80%',
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    paddingBottom: 15,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  currentCallInfo: {
    fontSize: 14,
    color: '#E74C3C',
    fontWeight: '600',
    backgroundColor: '#ffe6e6',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
    marginBottom: 6,
  },
  subtitle: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
  },
  closeButton: {
    padding: 5,
  },
  closeButtonText: {
    fontSize: 24,
    color: '#666',
  },
  addParticipantSection: {
    flexDirection: 'row',
    marginBottom: 10,
    alignItems: 'center',
  },
  quickAddSection: {
    marginBottom: 20,
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  quickAddLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    fontWeight: '500',
  },
  quickAddButton: {
    backgroundColor: '#28a745',
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 6,
    alignItems: 'center',
  },
  quickAddButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  numberInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    marginRight: 10,
  },
  addButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
  },
  addButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },
  participantsSection: {
    flex: 1,
    marginBottom: 20,
  },
  sectionTitleContainer: {
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  participantsSummary: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  summaryText: {
    fontSize: 14,
    color: '#333',
    marginBottom: 4,
    fontWeight: '500',
  },
  connectedCount: {
    fontSize: 14,
    color: '#27AE60',
    fontWeight: '600',
  },
  noParticipantsText: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    marginTop: 20,
  },
  participantsList: {
    maxHeight: 200,
  },
  participantItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    paddingHorizontal: 15,
    marginVertical: 5,
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e9ecef',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  participantInfo: {
    flex: 1,
  },
  participantMainInfo: {
    marginBottom: 6,
  },
  participantNumberDisplay: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 4,
    letterSpacing: 0.5,
  },
  participantStatus: {
    fontSize: 14,
    fontWeight: '500',
  },
  participantConnectedBadge: {
    backgroundColor: '#d4edda',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  participantJoinedText: {
    fontSize: 12,
    color: '#155724',
    fontWeight: '600',
  },
  statusConnected: {
    color: '#27AE60',
  },
  statusCalling: {
    color: '#F39C12',
  },
  statusDisconnected: {
    color: '#E74C3C',
  },
  removeButton: {
    padding: 8,
  },
  removeButtonText: {
    fontSize: 16,
  },
  controlButtons: {
    marginTop: 10,
  },
  controlButton: {
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  endButton: {
    backgroundColor: '#E74C3C',
  },
  endButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default ConferenceBridge;
