import React, { useState, useRef, useEffect } from 'react';
import firestore from '@react-native-firebase/firestore';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Button,
  Alert,
  Platform,
  PermissionsAndroid,
  TouchableOpacity,
  Vibration,
  NativeModules,
} from 'react-native';
import Sound from 'react-native-sound';
import { Endpoint } from 'react-native-pjsip';
import mockSipService from './services/mockSipService';
import InCallManager from 'react-native-incall-manager';
import 'react-native-gesture-handler';
import { NavigationContainer, useFocusEffect } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import ConvergenceScreen from './SoftphoneScreen';
import CallingScreen from './CallingScreen';
import TransferKeypad from './TransferKeypad';
import ConferenceCallManager from './ConferenceCallManager';
import ContactScreen from './ContactScreen';
import AddContactScreen from './AddContactScreen';
import AttendedTransferScreen from './AttendedTransferScreen';
import PJSIPCallTransfer from './PJSIPCallTransfer';
import ConferenceBridge from './ConferenceBridge';
import { saveCallHistory } from './services/callHistoryService';

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firestore
  // --- Firestore: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á ---
  function useFirestoreUsers() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
      const unsubscribe = firestore()
        .collection('users')
        .onSnapshot(
          snapshot => {
            const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setUsers(data);
            setLoading(false);
          },
          err => {
            setError(err);
            setLoading(false);
          }
        );
      return () => unsubscribe();
    }, []);
    return { users, loading, error };
  }

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ audio
const AudioHelper = {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
  setCallAudioMode: () => {
    console.log('üîä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£...');

    try {
      // ‡πÉ‡∏ä‡πâ InCallManager ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
      AudioHelper.setCallAudioModeWithInCallManager();

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö React Native ‡πÉ‡∏ä‡πâ Sound library ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      Sound.setCategory('PlayAndRecord', true);
      console.log('‚úÖ Sound category set to PlayAndRecord');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô active
      Sound.setActive(true);
      console.log('‚úÖ Audio session activated');

      // ‡πÉ‡∏ä‡πâ Native Module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.setCallAudioMode()
          .then(result => {
            console.log('‚úÖ Native audio mode set:', result);
          })
          .catch(error => {
            console.log('‚ùå Native audio mode error:', error);
          });
      }

      console.log('‚úÖ Audio mode setup completed');
      return true;
    } catch (error) {
      console.log('‚ùå Error setting call audio mode:', error);
      return false;
    }
  },

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
  resetAudioMode: () => {
    console.log('üîä ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode...');

    try {
      // ‡πÉ‡∏ä‡πâ InCallManager ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
      AudioHelper.resetAudioModeWithInCallManager();

      Sound.setCategory('Ambient');
      Sound.setActive(false);

      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.resetAudioMode()
          .then(result => {
            console.log('‚úÖ Native audio mode reset:', result);
          })
          .catch(error => {
            console.log('‚ùå Native audio mode reset error:', error);
          });
      }

      console.log('‚úÖ Audio mode reset completed');
      return true;
    } catch (error) {
      console.log('‚ùå Error resetting audio mode:', error);
      return false;
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡∏Ñ‡πå
  checkAndFixMicrophone: call => {
    if (!call) return false;

    try {
      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡∏Ñ‡πå...');

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏Å‡∏≤‡∏£ mute ‡∏Ç‡∏≠‡∏á call
      if (typeof call.isMuted === 'function') {
        try {
          const isMuted = call.isMuted();
          console.log(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡∏Ñ‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (isMuted): ${isMuted}`);

          if (isMuted && typeof call.mute === 'function') {
            call.mute(false);
            console.log('‚úÖ ‡∏õ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß');
          }
        } catch (error) {
          console.log('‚ùå Error checking mute status:', error);
        }
      }

      console.log('‚úÖ Microphone check completed');
      return true;
    } catch (error) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡∏Ñ‡πå:', error);
      return false;
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  forceMicrophoneEnable: call => {
    console.log('üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå...');

    try {
      // Step 1: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio session
      AudioHelper.setCallAudioMode();

      // Step 2: ‡πÉ‡∏ä‡πâ Native Module ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.forceMicrophoneEnable()
          .then(result => {
            console.log('‚úÖ Native microphone force enabled:', result);
          })
          .catch(error => {
            console.log('‚ùå Native microphone force enable error:', error);
          });
      }

      // Step 3: ‡∏õ‡∏•‡∏î mute ‡πÉ‡∏ô call object
      if (call && typeof call.mute === 'function') {
        call.mute(false);
        console.log('‚úÖ Call unmuted');
      }

      // Step 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ mute
      if (call && typeof call.isMuted === 'function') {
        const isMuted = call.isMuted();
        console.log(`Final mute status: ${isMuted}`);
      }

      // Step 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡∏Ñ‡πå‡∏ú‡πà‡∏≤‡∏ô Native Module
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.getMicrophoneStatus()
          .then(status => {
            console.log('üìä Microphone status:', status);
          })
          .catch(error => {
            console.log('‚ùå Error getting microphone status:', error);
          });
      }

      // Step 6: ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä audio stream
      setTimeout(() => {
        try {
          if (call && typeof call.mute === 'function') {
            call.mute(true); // mute ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            setTimeout(() => {
              call.mute(false); // unmute ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              console.log('‚úÖ Audio stream refreshed');
            }, 100);
          }
        } catch (error) {
          console.log('‚ùå Error refreshing audio stream:', error);
        }
      }, 500);

      console.log('‚úÖ Force microphone enable completed');
      return true;
    } catch (error) {
      console.error('‚ùå Error in forceMicrophoneEnable:', error);
      return false;
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡πÇ‡∏û‡∏á
  speaker: null, // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á speaker

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡∏≥‡πÇ‡∏û‡∏á
  initializeSpeaker: async () => {
    try {
      console.log('üîä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏î‡πâ‡∏ß‡∏¢ InCallManager...');
      // InCallManager ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà
      AudioHelper.speaker = InCallManager;
      console.log('‚úÖ Speaker initialized with InCallManager');
      return true;
    } catch (error) {
      console.error('‚ùå Error initializing speaker:', error);
      return false;
    }
  },

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
  enableSpeaker: async () => {
    try {
      console.log('üîä ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á...');

      if (!AudioHelper.speaker) {
        await AudioHelper.initializeSpeaker();
      }

      if (AudioHelper.speaker) {
        AudioHelper.speaker.setSpeakerphoneOn(true);
        console.log('‚úÖ ‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return true;
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÑ‡∏î‡πâ');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error enabling speaker:', error);
      return false;
    }
  },

  // ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
  disableSpeaker: async () => {
    try {
      console.log('üîä ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á...');

      if (!AudioHelper.speaker) {
        await AudioHelper.initializeSpeaker();
      }

      if (AudioHelper.speaker) {
        AudioHelper.speaker.setSpeakerphoneOn(false);
        console.log('‚úÖ ‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return true;
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÑ‡∏î‡πâ');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error disabling speaker:', error);
      return false;
    }
  },

  // ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
  muteMicrophone: async () => {
    try {
      console.log('üîá ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå...');

      // ‡πÉ‡∏ä‡πâ Native Module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        const result = await NativeModules.AudioManagerModule.muteMicrophone();
        console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß (Android Native)');
        return result;
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Native Module
      if (InCallManager) {
        // InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ direct mute method ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
        console.log('‚ÑπÔ∏è ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ mute');
        return true;
      }

      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡πÑ‡∏î‡πâ');
      return false;
    } catch (error) {
      console.error('‚ùå Error muting microphone:', error);
      return false;
    }
  },

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
  unmuteMicrophone: async () => {
    try {
      console.log('üé§ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå...');

      // ‡πÉ‡∏ä‡πâ Native Module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        const result =
          await NativeModules.AudioManagerModule.unmuteMicrophone();
        console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß (Android Native)');
        return result;
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Native Module
      if (InCallManager) {
        // InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ direct unmute method ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
        console.log('‚ÑπÔ∏è ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ unmute');
        return true;
      }

      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡πÑ‡∏î‡πâ');
      return false;
    } catch (error) {
      console.error('‚ùå Error unmuting microphone:', error);
      return false;
    }
  },

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á (InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ direct volume control)
  setSpeakerVolume: async volume => {
    try {
      console.log(`üîä ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÄ‡∏õ‡πá‡∏ô ${volume}%...`);

      // InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ volume ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ setForceSpeakerphoneOn ‡πÑ‡∏î‡πâ
      if (!AudioHelper.speaker) {
        await AudioHelper.initializeSpeaker();
      }

      if (AudioHelper.speaker) {
        // ‡πÉ‡∏ä‡πâ setForceSpeakerphoneOn ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á volume
        AudioHelper.speaker.setForceSpeakerphoneOn(true);
        console.log(
          `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÅ‡∏•‡πâ‡∏ß (InCallManager ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ volume)`,
        );
        return true;
      } else {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÑ‡∏î‡πâ');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error setting speaker volume:', error);
      return false;
    }
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏≥‡πÇ‡∏û‡∏á
  isSpeakerEnabled: async () => {
    try {
      if (!AudioHelper.speaker) {
        await AudioHelper.initializeSpeaker();
      }

      // InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° state
      console.log(
        'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏≥‡πÇ‡∏û‡∏á: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (InCallManager limitation)',
      );
      return false; // default ‡πÄ‡∏õ‡πá‡∏ô false
    } catch (error) {
      console.error('‚ùå Error checking speaker status:', error);
      return false;
    }
  },

  // ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
  toggleSpeaker: async () => {
    try {
      // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å InCallManager ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ CallingScreen ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÄ‡∏≠‡∏á
      return await AudioHelper.enableSpeaker();
    } catch (error) {
      console.error('‚ùå Error toggling speaker:', error);
      return false;
    }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏î‡πâ‡∏ß‡∏¢ InCallManager
  setCallAudioModeWithInCallManager: () => {
    try {
      console.log('üîä ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏î‡πâ‡∏ß‡∏¢ InCallManager...');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ built-in speaker ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      InCallManager.setSpeakerphoneOn(false);
      a;

      console.log('‚úÖ Audio mode set with InCallManager');
      return true;
    } catch (error) {
      console.log(
        '‚ùå Error setting call audio mode with InCallManager:',
        error,
      );
      return false;
    }
  },

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡∏î‡πâ‡∏ß‡∏¢ InCallManager
  resetAudioModeWithInCallManager: () => {
    try {
      console.log('üîä ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡∏î‡πâ‡∏ß‡∏¢ InCallManager...');

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
      InCallManager.stop();

      console.log('‚úÖ Audio mode reset with InCallManager');
      return true;
    } catch (error) {
      console.log('‚ùå Error resetting audio mode with InCallManager:', error);
      return false;
    }
  },
};

function HomeScreen({
  navigation,
  status,
  setStatus,
  isConnected,
  setIsConnected,
  setAccountRef,
  setEndpointRef,
  setCurrentCallRef,
  setIsInCall,
  setCallStatus,
  setCurrentCallNumber,
  config,
  setConfig,
}) {
  // --- State ‡πÅ‡∏•‡∏∞ ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HomeScreen ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ---
  const [isConnecting, setIsConnecting] = useState(false);
  const endpointRef = useRef(null);
  const accountRef = useRef(null);
  const currentCallRef = useRef(null);
  const connectionTimeoutRef = useRef(null);
  const transferManagerRef = useRef(null);
  // Firestore users
  const { users, loading: usersLoading, error: usersError } = useFirestoreUsers();

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  const cleanup = async () => {
    try {
      console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ cleanup...');
      setIsConnecting(false);
      setIsConnected(false);
      setIsInCall(false);
      setCallStatus('');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode
      AudioHelper.resetAudioMode();

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout
      if (connectionTimeoutRef.current) {
        clearTimeout(connectionTimeoutRef.current);
        connectionTimeoutRef.current = null;
        console.log('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å connection timeout');
      }

      // ‡∏¢‡∏∏‡∏ï‡∏¥‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      if (currentCallRef.current) {
        try {
          console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏¢‡∏∏‡∏ï‡∏¥‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...');

          let callTerminated = false;

          // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ hangup
          if (!callTerminated) {
            try {
              await currentCallRef.current.hangup();
              console.log('‚úÖ ‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏¢‡∏∏‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ hangup');
              callTerminated = true;
            } catch (hangupError) {
              console.log('‚ùå hangup ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', hangupError);
            }
          }

          // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ terminate
          if (
            !callTerminated &&
            typeof currentCallRef.current.terminate === 'function'
          ) {
            try {
              await currentCallRef.current.terminate();
              console.log('‚úÖ ‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏¢‡∏∏‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ terminate');
              callTerminated = true;
            } catch (terminateError) {
              console.log('‚ùå terminate ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', terminateError);
            }
          }

          currentCallRef.current = null;
        } catch (callError) {
          console.error('Hangup call error:', callError);
          currentCallRef.current = null;
        }
      }

      if (endpointRef.current) {
        console.log('Starting cleanup...');

        // ‡∏•‡∏ö account ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
        if (accountRef.current) {
          try {
            console.log('Deleting account...');
            await endpointRef.current.deleteAccount(accountRef.current);
            console.log('Account deleted successfully');
            accountRef.current = null;
          } catch (accountError) {
            console.error('Delete account error:', accountError);
            accountRef.current = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
          }
        }

        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ account deletion ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        await new Promise(resolve => setTimeout(resolve, 500));

        // ‡∏•‡∏ö listeners
        try {
          if (endpointRef.current.removeAllListeners) {
            endpointRef.current.removeAllListeners();
            console.log('Listeners removed');
          }
        } catch (listenerError) {
          console.error('Remove listeners error:', listenerError);
        }

        // ‡∏´‡∏¢‡∏∏‡∏î endpoint
        try {
          console.log('Stopping endpoint...');
          if (typeof endpointRef.current.stop === 'function') {
            await endpointRef.current.stop();
            console.log('Endpoint stopped successfully');
          } else {
            console.log(
              'endpointRef.current.stop is not a function, skip stopping endpoint',
            );
          }
        } catch (stopError) {
          console.error('Stop endpoint error:', stopError);
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï endpoint ref
        endpointRef.current = null;
        console.log('Cleanup completed');
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ endpoint ‡∏Å‡πá‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs ‡πÄ‡∏â‡∏¢‡πÜ
        endpointRef.current = null;
        accountRef.current = null;
        currentCallRef.current = null;
        console.log('Simple cleanup completed');
      }
    } catch (error) {
      console.error('Cleanup error:', error);
      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs ‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
      endpointRef.current = null;
      accountRef.current = null;
      currentCallRef.current = null;
    }
  };
  // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const requestPermissions = async () => {
    if (Platform.OS === 'android') {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠
        if (!PermissionsAndroid.PERMISSIONS.RECORD_AUDIO) {
          console.warn('RECORD_AUDIO permission not found on this device');
          return;
        }

        // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå
        const audioPermission = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
          {
            title: '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå',
            message: '‡πÅ‡∏≠‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£',
            buttonPositive: '‡∏ï‡∏Å‡∏•‡∏á',
            buttonNegative: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          },
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡∏Ñ‡πå
        if (audioPermission !== PermissionsAndroid.RESULTS.GRANTED) {
          throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå CALL_PHONE
        if (PermissionsAndroid.PERMISSIONS.CALL_PHONE) {
          // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
          const callPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.CALL_PHONE,
            {
              title: '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÇ‡∏ó‡∏£',
              message: '‡πÅ‡∏≠‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£',
              buttonPositive: '‡∏ï‡∏Å‡∏•‡∏á',
              buttonNegative: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            },
          );

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
          if (callPermission !== PermissionsAndroid.RESULTS.GRANTED) {
            console.log('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ SIP ‡πÑ‡∏î‡πâ');
          }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå MODIFY_AUDIO_SETTINGS
        if (PermissionsAndroid.PERMISSIONS.MODIFY_AUDIO_SETTINGS) {
          // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
          const modifyAudioPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.MODIFY_AUDIO_SETTINGS,
            {
              title: '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
              message: '‡πÅ‡∏≠‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
              buttonPositive: '‡∏ï‡∏Å‡∏•‡∏á',
              buttonNegative: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            },
          );

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
          if (modifyAudioPermission !== PermissionsAndroid.RESULTS.GRANTED) {
            console.log('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
          }
        }
      } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå:', error);
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
      }
    }
  };

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP (Mock Version)
  const connectSIP = async () => {
    if (isConnecting) return;
    if (!config.domain || !config.username || !config.password) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
      return;
    }

    setIsConnecting(true);
    setIsConnected(false);
    setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');

    try {
      // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
      await requestPermissions();

      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP (Mock)...');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mock service
      const handleSipEvent = (event, data) => {
        console.log(`ÔøΩ SIP Event: ${event}`, data);
        
        if (event === 'registrationChanged') {
          if (data.isRegistered) {
            setIsConnected(true);
            setIsConnecting(false);
            setStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
            console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Mock)');
          } else {
            setIsConnected(false);
            setStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
            setIsConnecting(false);
          }
        } else if (event === 'callStateChanged') {
          setCallStatus(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${data.state}`);
          if (data.state === 'CONNECTED') {
            setCurrentCall(data.callId);
          } else if (data.state === 'DISCONNECTED') {
            setCurrentCall(null);
            setCallStatus('');
          }
        }
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° listener
      mockSipService.addListener(handleSipEvent);

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      const accountId = mockSipService.addAccount({
        username: config.username,
        domain: config.domain,
        password: config.password
      });

      console.log(`üÜî Account ID: ${accountId}`);

    } catch (error) {
      setIsConnecting(false);
      setStatus(`‚ùå ${error.message || error}`);
      console.error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å (Mock Version)

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ call events
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤
      Sound.setCategory('Playback');

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
      AudioHelper.setCallAudioMode();

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      const soundPath = Platform.select({
        android: 'incoming_call.mp3',
        ios: 'incoming_call.mp3',
      });

      const soundLocation = Platform.select({
        android: Sound.MAIN_BUNDLE,
        ios: '', // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÉ‡∏ô‡∏ö‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏•
      });

      const ringtone = new Sound(soundPath, soundLocation, error => {
        if (error) {
          console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ:', error);
          console.log('Error code:', error.code);
          console.log('Error description:', error.description);
        } else {
          console.log('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
          ringtone.setVolume(1.0);
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          console.log('Is sound ready?', ringtone.isLoaded());
          console.log('Sound duration:', ringtone.getDuration());
        }
      });

      endpointRef.current.on('call_received', call => {
        console.log('Incoming call:', call);
        if (call) {
          const remoteNumber = call
            .getRemoteUri()
            .split('@')[0]
            .replace('sip:', '');
          setCurrentCallRef(call);
          setCurrentCallNumber(remoteNumber);
          setCallStatus('üìû ‡∏™‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤');

          // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤
          if (ringtone.isLoaded()) {
            ringtone.setVolume(1.0);
            ringtone.setNumberOfLoops(-1); // ‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
            ringtone.play(success => {
              if (!success) {
                console.log('‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
              } else {
                console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤');
              }
            });
          } else {
            console.log('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô');
          }

          // ‡∏™‡∏±‡πà‡∏ô‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏™‡∏±‡πà‡∏ô 500ms, ‡∏´‡∏¢‡∏∏‡∏î 1000ms, ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
          const PATTERN = [500, 1000];
          Vibration.vibrate(PATTERN, true);
          Alert.alert(
            'üìû ‡∏™‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤',
            `‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${remoteNumber}`,
            [
              {
                text: '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
                onPress: async () => {
                  try {
                    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô
                    ringtone.stop();
                    Vibration.cancel();

                    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢...');
                    setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢...');

                    let rejected = false;

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ call.hangup()
                    if (
                      !rejected &&
                      call &&
                      typeof call.hangup === 'function'
                    ) {
                      try {
                        await call.hangup();
                        console.log('‚úÖ Call rejected via call.hangup()');
                        rejected = true;
                      } catch (error) {
                        console.log('‚ùå call.hangup() failed:', error);
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ call.reject()
                    if (
                      !rejected &&
                      call &&
                      typeof call.reject === 'function'
                    ) {
                      try {
                        await call.reject();
                        console.log('‚úÖ Call rejected via call.reject()');
                        rejected = true;
                      } catch (error) {
                        console.log('‚ùå call.reject() failed:', error);
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ endpointRef.current.hangupCall() ‡∏Å‡∏±‡∏ö call object
                    if (
                      !rejected &&
                      endpointRef.current &&
                      endpointRef.current.hangupCall
                    ) {
                      try {
                        await endpointRef.current.hangupCall(call);
                        console.log('‚úÖ Call rejected via endpoint.hangupCall');
                        rejected = true;
                      } catch (error) {
                        console.log('‚ùå endpoint.hangupCall failed:', error);
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ endpointRef.current.hangupCall() ‡∏Å‡∏±‡∏ö callId
                    if (
                      !rejected &&
                      call &&
                      call._callId &&
                      endpointRef.current
                    ) {
                      try {
                        await endpointRef.current.hangupCall(call._callId);
                        console.log(
                          '‚úÖ Call rejected via endpoint.hangupCall with _callId',
                        );
                        rejected = true;
                      } catch (error) {
                        console.log(
                          '‚ùå endpoint.hangupCall with _callId failed:',
                          error,
                        );
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: ‡πÉ‡∏ä‡πâ call.terminate()
                    if (
                      !rejected &&
                      call &&
                      typeof call.terminate === 'function'
                    ) {
                      try {
                        await call.terminate();
                        console.log('‚úÖ Call rejected via call.terminate()');
                        rejected = true;
                      } catch (error) {
                        console.log('‚ùå call.terminate() failed:', error);
                      }
                    }

                    if (!rejected) {
                      console.log(
                        '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
                      );
                    }

                    setCallStatus('üìû ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                    setTimeout(() => setCallStatus(''), 2000);
                  } catch (error) {
                    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ:', error);
                    setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢');
                    setTimeout(() => setCallStatus(''), 2000);
                  }
                },
                style: 'cancel',
              },
              {
                text: '‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢',
                onPress: async () => {
                  try {
                    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô
                    ringtone.stop();
                    Vibration.cancel();

                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
                    AudioHelper.setCallAudioMode();

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
                    let answered = false;

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: call.answer()
                    if (
                      !answered &&
                      call &&
                      typeof call.answer === 'function'
                    ) {
                      try {
                        await call.answer();
                        console.log('‚úÖ Call answered via call.answer()');
                        answered = true;
                      } catch (error) {
                        console.log('‚ùå call.answer() failed:', error);
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: call.answerCall()
                    if (
                      !answered &&
                      call &&
                      typeof call.answerCall === 'function'
                    ) {
                      try {
                        await call.answerCall();
                        console.log('‚úÖ Call answered via call.answerCall()');
                        answered = true;
                      } catch (error) {
                        console.log('‚ùå call.answerCall() failed:', error);
                      }
                    }

                    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: endpoint.answerCall()
                    if (
                      !answered &&
                      endpointRef.current &&
                      endpointRef.current.answerCall
                    ) {
                      try {
                        await endpointRef.current.answerCall(call);
                        console.log(
                          '‚úÖ Call answered via endpoint.answerCall()',
                        );
                        answered = true;
                      } catch (error) {
                        console.log('‚ùå endpoint.answerCall() failed:', error);
                      }
                    }

                    if (!answered) {
                      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ - ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏•‡πâ‡∏ß');
                    }

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    try {
                      if (call && typeof call.mute === 'function') {
                        call.mute(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                        console.log('‚úÖ Microphone explicitly unmuted');
                      }
                    } catch (muteError) {
                      console.log('‚ùå Error unmuting microphone:', muteError);
                    }

                    setIsInCall(true);
                    setCurrentCallRef(call);
                    navigation.navigate('Calling');
                  } catch (error) {
                    console.error('Error answering call:', error);
                    Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
                    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    ringtone.stop();
                    Vibration.cancel();
                    setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢');
                    setTimeout(() => setCallStatus(''), 2000);
                  }
                },
              },
            ],
            {
              cancelable: false,
              onDismiss: () => {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Alert ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                ringtone.stop();
                Vibration.cancel();
              },
            },
          );
        }
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö incoming_call
      endpointRef.current.on('incoming_call', call => {
        console.log('Incoming call event:', call);
        if (call) {
          setCurrentCallRef(call);
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤
          const incomingNumber = call?.remoteContact || call?.remoteNumber || 'Unknown';
          try {
            saveCallHistory({
              number: incomingNumber,
              type: 'incoming',
            }, 'default_user').catch(error => {
              console.error('Failed to save incoming call history:', error);
            });
          } catch (error) {
            console.error('Error saving incoming call history:', error);
          }
        }
      });

      endpointRef.current.on('call_changed', call => {
        const callInfo = call?._callInfo || call;
        const state = callInfo?.state || call?.state;
        const lastStatus = callInfo?.lastStatus || call?.lastStatus;
        const callId = call?._callId || call?.id || 'unknown';

        console.log(`Call state changed [${callId}]:`, { state, lastStatus });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isActiveCall =
          currentCallRef.current &&
          ((currentCallRef.current._callId &&
            currentCallRef.current._callId === callId) ||
            (currentCallRef.current.id &&
              currentCallRef.current.id === callId));

        console.log(`Is active call: ${isActiveCall}`);

        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ DISCONNECTED ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI
        if (!isActiveCall && state === 'PJSIP_INV_STATE_DISCONNECTED') {
          console.log(
            'Detected disconnection of a non-active call, updating UI...',
          );
          currentCallRef.current = null;
          setCurrentCallRef(null);
          setIsInCall(false);
          setCallStatus('üìû ‡∏≠‡∏µ‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢');
          setTimeout(() => setCallStatus(''), 2000);
        }

        if (state === 'PJSIP_INV_STATE_CALLING') {
          setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£...');
        } else if (state === 'PJSIP_INV_STATE_EARLY') {
          setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å...');
        } else if (state === 'PJSIP_INV_STATE_CONFIRMED') {
          setCallStatus('üìû ‡∏™‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
          setIsInCall(true);
          if (call) {
            currentCallRef.current = call;
            setCurrentCallRef(call);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            AudioHelper.setCallAudioMode();

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡∏Ñ‡πå
            setTimeout(() => {
              AudioHelper.checkAndFixMicrophone(call);
              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
              AudioHelper.forceMicrophoneEnable(call);
            }, 1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try {
              if (call && typeof call.mute === 'function') {
                call.mute(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                console.log('‚úÖ Microphone unmuted in CONFIRMED state');
              }
            } catch (muteError) {
              console.log(
                '‚ùå Error unmuting microphone in CONFIRMED state:',
                muteError,
              );
            }
          }
        } else if (state === 'PJSIP_INV_STATE_DISCONNECTED') {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢
          let disconnectReason = '';
          if (lastStatus === 487) {
            disconnectReason = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£';
          } else if (lastStatus === 486 || lastStatus === 600) {
            disconnectReason = '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≤‡∏¢';
          } else if (lastStatus === 480 || lastStatus === 408) {
            disconnectReason = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢';
          } else if (lastStatus === 603) {
            disconnectReason = '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢';
          } else if (lastStatus === 200) {
            disconnectReason = '‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥';
          } else if (lastStatus === 500 || lastStatus === 503) {
            disconnectReason = '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö SIP';
          } else if (lastStatus === 0 || !lastStatus) {
            disconnectReason = '‡∏≠‡∏µ‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢';
          } else {
            disconnectReason = `‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß (${lastStatus})`;
          }

          console.log('Call disconnected:', {
            state,
            lastStatus,
            disconnectReason,
          });

          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
          AudioHelper.resetAudioMode();

          setCallStatus(`üìû ${disconnectReason}`);
          setIsInCall(false);

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          if (currentCallRef.current) {
            console.log('Resetting current call reference');
            currentCallRef.current = null;
            setCurrentCallRef(null);
          }

          setCurrentCallNumber('');

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
          try {
            if (state === 'PJSIP_INV_STATE_DISCONNECTED') {
              if (call?.getRemoteUri) {
                const remoteUri = call.getRemoteUri();
                console.log('Remote party disconnected the call:', remoteUri);
              } else {
                console.log('Remote party disconnected the call (no URI)');
              }

              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ forcibly cleanup ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
              if (call && typeof call.delete === 'function') {
                try {
                  call.delete();
                  console.log('‚úÖ Call object deleted');
                } catch (deleteError) {
                  console.log('‚ùå Call delete error:', deleteError);
                }
              }
            }
          } catch (uriError) {
            console.log('Error handling remote URI:', uriError);
          }

          // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Softphone ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢
          if (navigation && navigation.canGoBack()) {
            try {
              navigation.goBack();
              console.log('‚úÖ Navigation after disconnect successful');
            } catch (navError) {
              console.error('‚ùå Navigation error after disconnect:', navError);
            }
          }

          setTimeout(() => setCallStatus(''), 2000);
        }
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö call terminated
      endpointRef.current.on('call_terminated', call => {
        console.log('Call terminated event received:', call);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        console.log('Current call state before termination:', {
          hasCurrentCallRef: !!currentCallRef.current,
        });

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏î
        setCallStatus('üìû ‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡∏Å‡∏ù‡πà‡∏≤‡∏¢');
        setIsInCall(false);
        currentCallRef.current = null;
        setCurrentCallRef(null);
        setCurrentCallNumber('');

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
        AudioHelper.resetAudioMode();
        AudioHelper.disableSpeaker().catch(error => {
          console.log('Error disabling speaker on call termination:', error);
        });

        // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Softphone
        if (navigation && navigation.canGoBack()) {
          try {
            navigation.goBack();
            console.log('‚úÖ Navigation to Softphone successful');
          } catch (navError) {
            console.error('‚ùå Navigation error:', navError);
          }
        }

        setTimeout(() => setCallStatus(''), 2000);
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö call_media_state_change
      endpointRef.current.on('call_media_state_change', call => {
        console.log('Call media state changed:', call);

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ audio session ‡πÄ‡∏°‡∏∑‡πà‡∏≠ media state ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        if (call) {
          const mediaState = call.getMediaState
            ? call.getMediaState()
            : call.mediaState;
          console.log('Media state:', mediaState);

          if (mediaState === 'PJSIP_MEDIA_ACTIVE') {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ audio ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            console.log('Audio is now active - starting microphone check');

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
            AudioHelper.setCallAudioMode();

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡∏Ñ‡πå
            setTimeout(() => {
              AudioHelper.checkAndFixMicrophone(call);
              AudioHelper.forceMicrophoneEnable(call);
            }, 500); // ‡∏£‡∏≠‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try {
              if (call && typeof call.mute === 'function') {
                call.mute(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                console.log('‚úÖ Microphone unmuted in MEDIA_ACTIVE state');
              }
            } catch (muteError) {
              console.log(
                '‚ùå Error unmuting microphone in MEDIA_ACTIVE state:',
                muteError,
              );
            }
          }
        }
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö call_connected
      endpointRef.current.on('call_connected', call => {
        console.log('Call connected:', call);

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        AudioHelper.setCallAudioMode();

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô speaker
        AudioHelper.initializeSpeaker();

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡∏Ñ‡πå
        setTimeout(() => {
          AudioHelper.checkAndFixMicrophone(call);
          AudioHelper.forceMicrophoneEnable(call);
        }, 1500); // ‡∏£‡∏≠ 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô audio streams
        try {
          if (call && typeof call.mute === 'function') {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            call.mute(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            console.log('‚úÖ Call microphone unmuted in call_connected');
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á audio streams
          if (call && typeof call.getMediaStreams === 'function') {
            const streams = call.getMediaStreams();
            console.log('Media streams:', streams);
          }
        } catch (mediaError) {
          console.error(
            'Error configuring media on call connected:',
            mediaError,
          );
        }
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Account
      const accountConfig = {
        username: config.username,
        domain: config.domain,
        password: config.password,
        proxy: `sip:${config.domain}:${config.port}`,
        transport: 'UDP',
        regOnAdd: true,
        stunServer: 'stun:stun.l.google.com:19302',
        mediaConfig: {
          audioCodecs: [
            'PCMU/8000', // G.711 Œº-law (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
            'PCMA/8000', // G.711 A-law
            'speex/8000', // Speex 8kHz (‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
            'iLBC/8000', // iLBC
          ],
          videoCodecs: [], // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ video codec
          // ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
          audioConfig: {
            // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            echoCancellation: false, // ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            noiseSuppression: false, // ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            autoGainControl: false, // ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏á

            // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            sampleRate: 8000, // 8kHz ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
            channelCount: 1, // mono ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
            bitsPerSample: 16, // ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô

            // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            enableAudio: true,
            enableMicrophone: true,
            enableSpeaker: true,

            // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audioVolume: 1.0, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ 0.0-1.0 ‡πÅ‡∏ó‡∏ô
            microphoneVolume: 1.0,
            txLevel: 1.0, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            rxLevel: 1.0, // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

            // ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏£‡∏ö‡∏Å‡∏ß‡∏ô
            vad: false, // ‡∏õ‡∏¥‡∏î Voice Activity Detection
            agc: false, // ‡∏õ‡∏¥‡∏î Auto Gain Control
            noVad: true, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î VAD
            disableSilenceDetection: true, // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏µ‡∏¢‡∏ö

            // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
            audioMode: 'communication', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô communication
            audioQuality: 'default', // ‡πÉ‡∏ä‡πâ default ‡πÅ‡∏ó‡∏ô high

      console.log(`üÜî Account ID: ${accountId}`);

    } catch (error) {
      setIsConnecting(false);
      setStatus(`‚ùå ${error.message || error}`);
      console.error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const handleConnectionTimeout = () => {
    setIsConnecting(false);
    setIsConnected(false);
    setStatus('‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    Alert.alert(
      '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      [{ text: '‡∏ï‡∏Å‡∏•‡∏á' }],
    );
    cleanup();
  };

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà)
  const cancelConnection = async () => {
    setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å...');
    await cleanup();
    setStatus('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
  };

  // ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const disconnect = async () => {
    await cleanup();
    setStatus('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Convergence</Text>
      </View>

      <View style={styles.content}>
        <View style={styles.card}>
          <View style={styles.cardHeader}>
            <Text style={styles.cardTitle}>Server Settings</Text>
            <Text style={styles.cardSubtitle}>
              Configure your SIP server connection
            </Text>
          </View>

          <View style={styles.inputGroup}>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>IP Address</Text>
              <TextInput
                style={[
                  styles.input,
                  !isConnecting && !isConnected ? {} : styles.inputDisabled,
                ]}
                placeholder="192.168.1.100"
                value={config.domain}
                onChangeText={text => setConfig({ ...config, domain: text })}
                editable={!isConnecting && !isConnected}
              />
            </View>

            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Port</Text>
              <TextInput
                style={[
                  styles.input,
                  !isConnecting && !isConnected ? {} : styles.inputDisabled,
                ]}
                placeholder="5060"
                value={config.port}
                onChangeText={text => setConfig({ ...config, port: text })}
                keyboardType="numeric"
                editable={!isConnecting && !isConnected}
              />
            </View>

            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Username</Text>
              <TextInput
                style={[
                  styles.input,
                  !isConnecting && !isConnected ? {} : styles.inputDisabled,
                ]}
                placeholder="SIP username"
                value={config.username}
                onChangeText={text => setConfig({ ...config, username: text })}
                editable={!isConnecting && !isConnected}
              />
            </View>

            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Password</Text>
              <TextInput
                style={[
                  styles.input,
                  !isConnecting && !isConnected ? {} : styles.inputDisabled,
                ]}
                placeholder="SIP password"
                value={config.password}
                onChangeText={text => setConfig({ ...config, password: text })}
                secureTextEntry
                editable={!isConnecting && !isConnected}
              />
            </View>
          </View>

          <View style={styles.buttonContainer}>
            {!isConnecting && !isConnected && (
              <TouchableOpacity
                style={styles.connectButton}
                onPress={connectSIP}
                activeOpacity={0.7}
              >
                <Text style={styles.connectButtonText}>Connect</Text>
              </TouchableOpacity>
            )}

            {isConnecting && (
              <View style={styles.connectingContainer}>
                <TouchableOpacity
                  style={styles.connectingButton}
                  disabled={true}
                >
                  <Text style={styles.connectingButtonText}>Connecting...</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.cancelButton}
                  onPress={cancelConnection}
                  activeOpacity={0.7}
                >
                  <Text style={styles.cancelButtonText}>Cancel</Text>
                </TouchableOpacity>
              </View>
            )}

            {!isConnecting && isConnected && (
              <TouchableOpacity
                style={styles.disconnectButton}
                onPress={disconnect}
                activeOpacity={0.7}
              >
                <Text style={styles.disconnectButtonText}>Disconnect</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>

        <View style={styles.statusCard}>
          <View style={styles.statusHeader}>
            <Text style={styles.statusTitle}>Status</Text>
            <View style={styles.statusIndicator}>
              <View
                style={[
                  styles.statusDot,
                  isConnected
                    ? styles.statusOnline
                    : isConnecting
                    ? styles.statusConnecting
                    : styles.statusOffline,
                ]}
              />
              <Text style={styles.statusText}>
                {isConnected
                  ? 'Connected'
                  : isConnecting
                  ? 'Connecting...'
                  : 'Disconnected'}
              </Text>
            </View>
          </View>
          {status !== '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' && (
            <Text style={styles.statusMessage}>{status}</Text>
          )}
        </View>
      </View>
    </View>
  );
}

const Stack = createStackNavigator();

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  header: {
    paddingTop: 40,
    paddingBottom: 15,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1a1a1a',
    letterSpacing: 0.5,
    paddingHorizontal: 16,
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
    paddingTop: 16,
  },
  card: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#f0f0f0',
  },
  cardHeader: {
    alignItems: 'center',
    marginBottom: 32,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 4,
  },
  cardSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 32,
  },
  inputContainer: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333333',
    marginBottom: 8,
  },
  input: {
    height: 40,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 4,
    paddingHorizontal: 12,
    fontSize: 14,
    backgroundColor: '#ffffff',
    color: '#1a1a1a',
  },
  inputDisabled: {
    backgroundColor: '#f8f8f8',
    color: '#999999',
  },
  buttonContainer: {
    alignItems: 'center',
  },
  connectButton: {
    backgroundColor: '#007aff',
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 4,
    minWidth: 100,
  },
  connectButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '600',
    textAlign: 'center',
  },
  connectingContainer: {
    alignItems: 'center',
  },
  connectingButton: {
    backgroundColor: '#ff9500',
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 4,
    marginBottom: 8,
    minWidth: 100,
  },
  connectingButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  cancelButton: {
    backgroundColor: '#8e8e93',
    paddingVertical: 6,
    paddingHorizontal: 16,
    borderRadius: 4,
  },
  cancelButtonText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '500',
  },
  disconnectButton: {
    backgroundColor: '#ff3b30',
    paddingVertical: 10,
    paddingHorizontal: 24,
    borderRadius: 4,
    minWidth: 100,
  },
  disconnectButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '600',
    textAlign: 'center',
  },
  statusCard: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    borderWidth: 1,
    borderColor: '#f0f0f0',
  },
  statusHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  statusTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
  },
  statusIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  statusOnline: {
    backgroundColor: '#34c759',
  },
  statusConnecting: {
    backgroundColor: '#ff9500',
  },
  statusOffline: {
    backgroundColor: '#ff3b30',
  },
  statusText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333333',
  },
  statusMessage: {
    fontSize: 14,
    color: '#666666',
    marginTop: 8,
    lineHeight: 20,
  },
});

export default function App() {
  // State ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
  const [status, setStatus] = useState('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  const [isConnected, setIsConnected] = useState(false);
  const [accountRef, setAccountRef] = useState(null);
  const [endpointRef, setEndpointRef] = useState(null);
  const [currentCallRef, setCurrentCallRef] = useState(null);
  const [isInCall, setIsInCall] = useState(false);
  const [callStatus, setCallStatus] = useState('');
  const [currentCallNumber, setCurrentCallNumber] = useState('');
  const [isHold, setIsHold] = useState(false);
  const callTimer = useRef(null);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transfer Keypad
  const [showTransferKeypad, setShowTransferKeypad] = useState(false);
  const [transferType, setTransferType] = useState('unattended'); // 'unattended' ‡∏´‡∏£‡∏∑‡∏≠ 'attended'

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å currentCallNumber)
  const [transferTargetNumber, setTransferTargetNumber] = useState('');

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Attended Transfer
  const [attendedTransferState, setAttendedTransferState] = useState({
    originalCallRef: null, // ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
    consultCallRef: null, // ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
    targetNumber: '', // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ
    step: 'idle', // 'idle', 'consulting', 'ready_to_transfer'
    isConsulting: false, // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  });

  // ‡πÄ‡∏Å‡πá‡∏ö navigation reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô transfer functions
  const [navigationRef, setNavigationRef] = useState(null);

  const [config, setConfig] = useState({
    username: '1004',
    domain: '192.168.0.5',
    password: 'con1004',
    port: '5060',
  });

  // ref for ConferenceCallManager
  const conferenceRef = useRef(null);
  
  // ref for ConferenceBridge
  const conferenceBridgeRef = useRef(null);

  // Helper function for safe alerts
  const safeAlert = (title, message) => {
    try {
      Alert.alert(title, message);
    } catch (error) {
      console.log('Alert error:', error);
      console.log(`${title}: ${message}`);
    }
  };

  // Function to start call timer
  const startCallTimer = () => {
    // Clear existing timer if any
    if (callTimer.current) {
      clearInterval(callTimer.current);
    }

    // Start new timer
    callTimer.current = setInterval(() => {
      // Timer logic can be added here if needed
      console.log('Call timer tick');
    }, 1000);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å (Mock Version)
  const makeCall = async callNumber => {
    if (!callNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£');
      return;
    }

    if (!isConnected) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP ‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    try {
      setCallStatus('üìû ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏ó‡∏£...');
      setCurrentCallNumber(callNumber);
      setIsInCall(true);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏ó‡∏£
      AudioHelper.setCallAudioMode();

      console.log('üìû ‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á (Mock):', callNumber);

      // ‡πÉ‡∏ä‡πâ mock service ‡πÅ‡∏ó‡∏ô
      const callId = mockSipService.makeCall('mock_account', callNumber);
      setCurrentCall(callId);
      setIsHold(false);
      setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');

      console.log('‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Mock)');

    } catch (error) {
      setCallStatus('‚ùå ‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      setIsInCall(false);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ: ${error.message}`);
      setTimeout(() => setCallStatus(''), 3000);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢ (Mock Version)
  const hangupCall = async () => {
    try {
      if (!currentCall) {
        console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏á');
        setTimeout(() => setCallStatus(''), 2000);
        return;
      }

      console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢ (Mock)...');
      setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢...');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢
      AudioHelper.resetAudioMode();

      // ‡πÉ‡∏ä‡πâ mock service
      mockSipService.hangupCall(currentCall);
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      setCurrentCall(null);
      setCurrentCallRef(null);
      setCurrentCallNumber('');
      setIsInCall(false);
      setIsHold(false);
      setCallStatus('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      
      console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Mock)');
      setTimeout(() => setCallStatus(''), 2000);

    } catch (error) {
      console.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢:', error);
      setCallStatus('‚ùå ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      setTimeout(() => setCallStatus(''), 2000);
    }
  };
          }
        }

        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ endpointRef.hangupCall() ‡∏Å‡∏±‡∏ö callId
        if (
          !cancelled &&
          currentCallRef &&
          currentCallRef._callId &&
          endpointRef
        ) {
          try {
            await endpointRef.hangupCall(currentCallRef._callId);
            console.log(
              '‚úÖ Call cancelled via endpoint.hangupCall with _callId',
            );
            cancelled = true;
          } catch (error) {
            console.log('‚ùå endpoint.hangupCall with _callId failed:', error);
          }
        }

        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ currentCallRef.terminate()
        if (
          !cancelled &&
          currentCallRef &&
          typeof currentCallRef.terminate === 'function'
        ) {
          try {
            await currentCallRef.terminate();
            console.log('‚úÖ Call cancelled via currentCallRef.terminate()');
            cancelled = true;
          } catch (error) {
            console.log('‚ùå currentCallRef.terminate() failed:', error);
          }
        }

        if (!cancelled) {
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        }

        console.log('‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setCallStatus('üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        setIsInCall(false);
        setIsHold(false);
        setCurrentCallRef(null);
        setCurrentCallNumber('');

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå call timer
        if (callTimer.current) {
          clearInterval(callTimer.current);
          callTimer.current = null;
        }

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => setCallStatus(''), 2000);
      } catch (hangupError) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ:', hangupError);
        setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢');

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ error
        setIsInCall(false);
        setIsHold(false);
        setCurrentCallRef(null);
        setCurrentCallNumber('');

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå call timer
        if (callTimer.current) {
          clearInterval(callTimer.current);
          callTimer.current = null;
        }

        setTimeout(() => setCallStatus(''), 3000);
      }

      return true;
    } catch (error) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢:', error);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
      setCallStatus(`‚ùå ${error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢'}`);

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error
      setIsInCall(false);
      setIsHold(false);
      setCurrentCallRef(null);
      setCurrentCallNumber('');

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå call timer
      if (callTimer.current) {
        clearInterval(callTimer.current);
        callTimer.current = null;
      }

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => setCallStatus(''), 3000);

      // ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ component ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
      throw error;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Hold ‡∏™‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transfer)
  const holdCall = async (callRef = null) => {
    const targetCall = callRef || currentCallRef;
    if (!targetCall) {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
    }

    try {
      let holdSuccess = false;

      // ‡πÉ‡∏ä‡πâ endpoint holdCall
      if (endpointRef && endpointRef.holdCall) {
        try {
          await endpointRef.holdCall(targetCall);
          holdSuccess = true;
          console.log('‚úÖ Hold ‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå Hold failed:', error);
        }
      }

      if (holdSuccess) {
        if (targetCall === currentCallRef) {
          setIsHold(true);
          setCallStatus('‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å Hold ‡πÅ‡∏•‡πâ‡∏ß');
        }
        return true;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Hold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Hold call error:', error);
      throw error;
    }
  };

  // Attended Transfer - ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (3-way conference)
  const startAttendedTransfer = async transferTo => {
    if (!currentCallRef) {
      throw new Error('No active call to transfer');
    }

    try {
      // Hold current call
      await holdCall(currentCallRef);

      // Make new call to transfer target
      const callUri = `sip:${transferTo}@${config.domain}`;
      const transferCall = await endpointRef.makeCall(accountRef, callUri);
      console.log(`Transfer call initiated to ${transferTo}`);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Attended Transfer
      setAttendedTransferState({
        originalCallRef: currentCallRef,
        consultCallRef: transferCall,
        targetNumber: transferTo,
        step: 'consulting',
        isConsulting: true,
      });

      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: ${transferTo}`);

      return transferCall;
    } catch (error) {
      console.error('Failed to start attended transfer:', error);
      throw error;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Unhold ‡∏™‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transfer)
  const unholdCall = async (callRef = null) => {
    const targetCall = callRef || currentCallRef;
    if (!targetCall) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Unhold');
      Alert.alert('Unhold call error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Unhold');
      return false;
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ call ‡∏°‡∏µ method unhold
      if (typeof targetCall.unhold !== 'function') {
        console.log('‚ùå call object ‡πÑ‡∏°‡πà‡∏°‡∏µ method unhold');
        Alert.alert('Unhold call error', 'call object ‡πÑ‡∏°‡πà‡∏°‡∏µ method unhold');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ call (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô hold ‡∏Å‡πà‡∏≠‡∏ô)
      if (targetCall.state !== 'LOCAL_HOLD') {
        console.log(`‚ùå call state ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà LOCAL_HOLD: ${targetCall.state}`);
        Alert.alert(
          'Unhold call error',
          `call state ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà LOCAL_HOLD: ${targetCall.state}`,
        );
        return false;
      }

      let unholdSuccess = false;

      // ‡πÉ‡∏ä‡πâ endpoint unholdCall
      if (endpointRef && endpointRef.unholdCall) {
        try {
          await endpointRef.unholdCall(targetCall);
          unholdSuccess = true;
          console.log('‚úÖ Unhold ‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå Unhold failed:', error);
        }
      }

      if (unholdSuccess) {
        if (targetCall === currentCallRef) {
          setIsHold(false);
          setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
        }
        return true;
      } else {
        Alert.alert('Unhold call error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Unhold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
        return false;
      }
    } catch (error) {
      console.error('Unhold call error:', error);
      Alert.alert('Unhold call error', `Error: ${error.message || error}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Hold/Unhold ‡∏™‡∏≤‡∏¢
  const toggleHold = async () => {
    if (!currentCallRef) {
      safeAlert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return;
    }
    try {
      const call = currentCallRef;
      if (!isHold) {
        // Hold call
        let holdSuccess = false;
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ endpoint holdCall
        if (!holdSuccess && endpointRef && endpointRef.holdCall) {
          try {
            await endpointRef.holdCall(call);
            holdSuccess = true;
          } catch (error) {
            console.log('Hold failed:', error);
          }
        }
        if (holdSuccess) {
          setIsHold(true);
          setCallStatus('‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å Hold ‡πÅ‡∏•‡πâ‡∏ß');
          // ‡∏´‡∏¢‡∏∏‡∏î call timer ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          if (callTimer.current) {
            clearInterval(callTimer.current);
            callTimer.current = null;
          }
        } else {
          safeAlert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Hold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
        }
      } else {
        // Unhold call
        let unholdSuccess = false;
        if (!unholdSuccess && endpointRef && endpointRef.unholdCall) {
          try {
            await endpointRef.unholdCall(call);
            unholdSuccess = true;
          } catch (error) {
            console.log('Unhold failed', error);
          }
        }
        if (unholdSuccess) {
          setIsHold(false);
          setCallStatus('‡∏™‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å Unhold ‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ');
          // ‡πÄ‡∏£‡∏¥‡πà‡∏° call timer ‡πÉ‡∏´‡∏°‡πà
          startCallTimer();
        } else {
          safeAlert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Unhold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
        }
      }
    } catch (error) {
      console.log('Toggle hold error:', error);
      safeAlert(
        '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ${isHold ? 'Unhold' : 'Hold'} ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`,
      );
    }
  };
  // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Hold/Unhold ‡∏™‡∏≤‡∏¢

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ (Call Transfer)

  // ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Unattended Transfer)
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÇ‡∏ó‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤
  const unattendedTransfer = async targetNumber => {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢:');
    console.log('üìû currentCallRef:', !!currentCallRef);
    console.log('üìû isInCall:', isInCall);
    console.log('üìû currentCallNumber:', currentCallNumber);
    console.log('üìû transferManagerRef:', !!transferManagerRef.current);

    if (!currentCallRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return false;
    }

    if (!isInCall) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà');
      return false;
    }

    if (!targetNumber || !targetNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      return false;
    }

    if (!transferManagerRef.current) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'Transfer Manager ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return false;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô
    return new Promise(resolve => {
      Alert.alert(
        '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢',
        `üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢:\n\n` +
          `üìû ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢ ‚Üî ${targetNumber}\n\n` +
          `‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:\n` +
          `‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${targetNumber} ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n` +
          `‚Ä¢ ${targetNumber} ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢\n` +
          `‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤\n\n` +
          `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
        [
          {
            text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            style: 'cancel',
            onPress: () => resolve(false),
          },
          {
            text: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢',
            onPress: async () => {
              try {
                const result = await performUnattendedTransfer(targetNumber);
                resolve(result);
              } catch (error) {
                resolve(false);
              }
            },
          },
        ],
      );
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Unattended Transfer ‡∏à‡∏£‡∏¥‡∏á
  const performUnattendedTransfer = async targetNumber => {
    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Unattended Transfer');
      
      if (!transferManagerRef.current) {
        throw new Error('Transfer Manager ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      if (!currentCallRef) {
        throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° URI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      const targetUri = targetNumber.includes('@') 
        ? targetNumber 
        : `sip:${targetNumber}@${config.domain}`;

      console.log('üîó Target URI:', targetUri);

      // ‡πÉ‡∏ä‡πâ Transfer Manager ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const success = await transferManagerRef.current.unattendedTransfer(
        currentCallRef._callId || currentCallRef.id,
        targetUri
      );

      if (success) {
        console.log('‚úÖ Unattended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        setTimeout(() => {
          setIsInCall(false);
          setCurrentCallRef(null);
          setCurrentCallNumber('');
          setIsHold(false);
          setCallStatus('');
          AudioHelper.resetAudioMode();
        }, 2000);

        Alert.alert(
          '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
          `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` +
            `üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:\n` +
            `‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö ${targetNumber}\n` +
            `‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n\n` +
            `üìû ${targetNumber} ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
        );

        return true;
      } else {
        throw new Error('‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢:', error);
      setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ standard SIP transfer)
  const simpleConnectCall = async targetNumber => {
    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢...');
      console.log('üìû ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢ ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö:', targetNumber);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö call state ‡∏Å‡πà‡∏≠‡∏ô
      if (!currentCallRef) {
        throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      if (!isInCall) {
        throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà');
      }

      // ‡πÉ‡∏ä‡πâ domain ‡∏à‡∏≤‡∏Å config
      const domain =
        config && config.domain ? config.domain : 'your-sip-domain.com';
      const targetUri = targetNumber.includes('@')
        ? targetNumber
        : `sip:${targetNumber.trim()}@${domain}`;

      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ${targetNumber}...`);
      console.log('üîó Target URI:', targetUri);
      console.log(
        'üìã ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢ -> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö -> ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
      );
      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö methods ‡∏ó‡∏µ‡πà‡∏°‡∏µ:');
      console.log('  - endpointRef.xferCall:', typeof endpointRef.xferCall);
      console.log(
        '  - currentCallRef.transfer:',
        typeof currentCallRef.transfer,
      );
      console.log(
        '  - endpointRef.transferCall:',
        typeof endpointRef.transferCall,
      );

      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ methods ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
      let transferSuccess = false;

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ endpointRef.xferCall
      if (!transferSuccess && typeof endpointRef.xferCall === 'function') {
        try {
          console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡πÉ‡∏ä‡πâ endpointRef.xferCall...');
          await endpointRef.xferCall(accountRef, currentCallRef, targetUri);
          transferSuccess = true;
          console.log('‚úÖ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ currentCallRef.transfer
      if (!transferSuccess && typeof currentCallRef.transfer === 'function') {
        try {
          console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2] ‡πÉ‡∏ä‡πâ currentCallRef.transfer...');
          await currentCallRef.transfer(targetUri);
          transferSuccess = true;
          console.log('‚úÖ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ endpointRef.transferCall
      if (!transferSuccess && typeof endpointRef.transferCall === 'function') {
        try {
          console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3] ‡πÉ‡∏ä‡πâ endpointRef.transferCall...');
          await endpointRef.transferCall(currentCallRef, targetUri);
          transferSuccess = true;
          console.log('‚úÖ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ SIP REFER method (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (!transferSuccess && typeof currentCallRef.refer === 'function') {
        try {
          console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4] ‡πÉ‡∏ä‡πâ currentCallRef.refer (SIP REFER)...');
          await currentCallRef.refer(targetUri);
          transferSuccess = true;
          console.log('‚úÖ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
          console.log('‚ùå [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      if (!transferSuccess) {
        console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á] ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Attended Transfer + Conference...');

        try {
          // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏ó‡∏≥ attended transfer
          // 1. Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
          console.log('üìû Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°...');
          await holdCall();

          // 2. ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
          console.log('üìû ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤:', targetUri);
          const newCall = await endpointRef.makeCall(accountRef, targetUri);

          if (newCall) {
            console.log('‚úÖ ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            setCallStatus(`‡∏£‡∏≠ ${targetNumber} ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢...`);

            // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            setTimeout(async () => {
              try {
                // 3. Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
                await unholdCall();

                // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á conference call
                if (typeof endpointRef.conferenceConnect === 'function') {
                  await endpointRef.conferenceConnect(currentCallRef, newCall);
                  console.log('‚úÖ Conference call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

                  // 5. ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference)
                  setTimeout(async () => {
                    try {
                      if (typeof newCall.hangup === 'function') {
                        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô conference
                        console.log('‚ÑπÔ∏è ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô conference');
                      }
                      transferSuccess = true;
                      setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á)');
                    } catch (error) {
                      console.log('Error in conference cleanup:', error);
                    }
                  }, 2000);
                } else {
                  console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ conference method');
                }
              } catch (error) {
                console.log('‚ùå Conference failed:', error);
                // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
                await unholdCall();
                setCallStatus('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏î‡∏¥‡∏°');
              }
            }, 3000); // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
          } else {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ');
          }
        } catch (error) {
          console.log('‚ùå ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      if (!transferSuccess) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ - ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏•‡πâ‡∏ß');
      }

      console.log(
        '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß',
      );
      setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      Alert.alert(
        '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` +
          `üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:\n` +
          `‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö ${targetNumber}\n` +
          `‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n\n` +
          `üìû ${targetNumber} ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
      );

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      setTimeout(() => {
        setIsInCall(false);
        setCurrentCallRef(null);
        setCurrentCallNumber('');
        setIsHold(false);
        setCallStatus('');
        AudioHelper.resetAudioMode();
      }, 2000);

      return true;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢:', error);
      setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)
  const connectCallToTarget = async targetNumber => {
    try {
      console.log('ÔøΩ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà...');
      console.log('ÔøΩ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏≤‡∏¢‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö:', targetNumber);

      // ‡πÉ‡∏ä‡πâ domain ‡∏à‡∏≤‡∏Å config ‡∏´‡∏£‡∏∑‡∏≠ default domain
      const domain =
        config && config.domain ? config.domain : 'your-sip-domain.com';

      const targetUri = targetNumber.includes('@')
        ? targetNumber
        : `sip:${targetNumber.trim()}@${domain}`;

      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ ${targetNumber}...`);

      // Step 1: Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
      await holdCall();
      console.log('ÔøΩ Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß');

      // Step 2: ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      console.log('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤:', targetUri);

      const newCall = await endpointRef.makeCall(accountRef, targetUri, {
        headers: {
          'X-Transfer-Type': 'Connect-Call',
        },
      });

      console.log('‚úÖ ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      setCallStatus(`‡∏£‡∏≠ ${targetNumber} ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢...`);

      // Step 3: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
      return new Promise(resolve => {
        const checkCallStatus = () => {
          if (newCall && newCall.state === 'confirmed') {
            console.log('‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            setCallStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢...');

            // Step 4: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
            setTimeout(async () => {
              try {
                // Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
                await unholdCall();

                // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
                if (typeof endpointRef.xferCall === 'function') {
                  await endpointRef.xferCall(
                    accountRef,
                    currentCallRef,
                    targetUri,
                  );
                } else if (typeof currentCallRef.transfer === 'function') {
                  await currentCallRef.transfer(targetUri);
                }

                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                Alert.alert(
                  '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                  `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` +
                    `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:\n` +
                    `‚Ä¢ ‡∏ù‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö ${targetNumber}\n` +
                    `‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n` +
                    `‚Ä¢ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ`,
                );

                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                setTimeout(() => {
                  setIsInCall(false);
                  setCurrentCallRef(null);
                  setCurrentCallNumber('');
                  setIsHold(false);
                  setCallStatus('');
                  AudioHelper.resetAudioMode();
                }, 2000);

                resolve(true);
              } catch (error) {
                console.error('‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
                Alert.alert(
                  '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                  `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`,
                );
                resolve(false);
              }
            }, 1000);
          } else {
            // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(checkCallStatus, 1000);
          }
        };

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        setTimeout(checkCallStatus, 1000);

        // ‡∏ï‡∏±‡πâ‡∏á timeout 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
        setTimeout(() => {
          Alert.alert('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤', `${targetNumber} ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢\n‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°`, [
            {
              text: '‡∏ï‡∏Å‡∏•‡∏á',
              onPress: async () => {
                try {
                  // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                  if (newCall) {
                    try {
                      if (typeof newCall.hangup === 'function') {
                        await newCall.hangup();
                      } else if (typeof newCall.terminate === 'function') {
                        await newCall.terminate();
                      }
                    } catch (hangupError) {
                      console.log(
                        '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ:',
                        hangupError.message,
                      );
                    }
                  }
                  // Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
                  await unholdCall();
                  setCallStatus('‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏î‡∏¥‡∏°');
                } catch (error) {
                  console.error('Error returning to original call:', error);
                }
                resolve(false);
              },
            },
          ]);
        }, 30000);
      });
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢:', error);
      setCallStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô)
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤
  const attendedTransfer = async targetNumber => {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Attended Transfer:');
    console.log('üìû currentCallRef:', !!currentCallRef);
    console.log('üìû isInCall:', isInCall);
    console.log('üìû currentCallNumber:', currentCallNumber);
    console.log('üìû transferManagerRef:', !!transferManagerRef.current);

    if (!currentCallRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return false;
    }

    if (!isInCall) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà');
      return false;
    }

    if (!targetNumber || !targetNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      return false;
    }

    if (!transferManagerRef.current) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'Transfer Manager ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      return false;
    }

    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° URI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      const targetUri = targetNumber.includes('@') 
        ? targetNumber 
        : `sip:${targetNumber}@${config.domain}`;

      // ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer ‡∏ú‡πà‡∏≤‡∏ô Transfer Manager
      const transferResult = await transferManagerRef.current.startAttendedTransfer(
        currentCallRef,
        targetUri
      );

      if (transferResult && transferResult.transferId) {
        console.log('‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
        setAttendedTransferState({
          originalCallRef: transferResult.originalCall,
          consultCallRef: transferResult.consultCall,
          targetNumber: targetNumber,
          transferId: transferResult.transferId,
          step: 'consulting',
          isConsulting: true,
        });

        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ AttendedTransferScreen
        if (navigationRef?.current) {
          navigationRef.current.navigate('AttendedTransfer', {
            transferId: transferResult.transferId,
            originalCall: transferResult.originalCall,
            consultCall: transferResult.consultCall,
            targetNumber: targetNumber,
            transferManager: transferManagerRef.current,
            AudioHelper: AudioHelper,
          });
        }

        return transferResult;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer ‡πÑ‡∏î‡πâ');
      }

    } catch (error) {
      console.error('‚ùå Error in attended transfer:', error);
      setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended ‡πÑ‡∏î‡πâ');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô attended transfer
  const handleCompleteTransfer = async () => {
    try {
      const { originalCallRef, consultCallRef, targetNumber } =
        attendedTransferState;

      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢:');
      console.log('üîç targetNumber:', targetNumber);
      console.log('üîç originalCallRef:', !!originalCallRef);
      console.log('üîç consultCallRef:', !!consultCallRef);
      console.log('üîç currentCallRef:', !!currentCallRef);
      console.log('üîç isInCall:', isInCall);

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Attended Transfer ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (originalCallRef && consultCallRef && targetNumber) {
        console.log('‚úÖ ‡πÉ‡∏ä‡πâ Complete Attended Transfer');
        return await completeAttendedTransfer();
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ targetNumber ‡∏à‡∏≤‡∏Å state ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô attended
      if (targetNumber && currentCallRef && isInCall) {
        console.log('üîÑ ‡πÉ‡∏ä‡πâ Unattended Transfer ‡πÅ‡∏ó‡∏ô (‡∏°‡∏µ targetNumber)');
        return await unattendedTransfer(targetNumber);
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÑ‡∏°‡πà‡∏°‡∏µ targetNumber ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      console.log('‚ùì ‡πÑ‡∏°‡πà‡∏°‡∏µ targetNumber ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      Alert.alert('‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢', [
        { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
        {
          text: '‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç',
          onPress: () => {
            // ‡πÄ‡∏õ‡∏¥‡∏î Transfer Keypad ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
            setTransferType('unattended');
            setShowTransferKeypad(true);
          },
        },
      ]);
    } catch (error) {
      console.error('‚ùå Error in handleCompleteTransfer:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
    }
  };
  const completeAttendedTransfer = async () => {
    try {
      console.log('‚úÖ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer');
      console.log('üîç Debug attendedTransferState:', attendedTransferState);

      const { originalCallRef, consultCallRef, targetNumber } =
        attendedTransferState;

      console.log('üîç Debug originalCallRef:', originalCallRef);
      console.log('üîç Debug consultCallRef:', consultCallRef);
      console.log('üîç Debug currentCallRef:', currentCallRef);

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ targetNumber ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      if (!targetNumber) {
        Alert.alert(
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç',
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏õ',
          [
            { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
            {
              text: '‡∏ï‡∏Å‡∏•‡∏á',
              onPress: inputNumber => {
                if (inputNumber) {
                  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ unattended transfer ‡πÅ‡∏ó‡∏ô
                  unattendedTransfer(inputNumber);
                }
              },
            },
          ],
          { type: 'plain-text-input' },
        );
        return;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ consultCallRef ‡∏´‡∏£‡∏∑‡∏≠ originalCallRef ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ unattended transfer ‡πÅ‡∏ó‡∏ô
      if (!consultCallRef || !originalCallRef) {
        console.log(
          'üîÑ ‡πÑ‡∏°‡πà‡∏°‡∏µ Attended Transfer State ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÉ‡∏ä‡πâ Unattended Transfer ‡πÅ‡∏ó‡∏ô...',
        );
        Alert.alert(
          '‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
          `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${targetNumber} ‡πÅ‡∏ó‡∏ô\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
          [
            { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
            {
              text: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏•‡∏¢',
              onPress: async () => {
                try {
                  await unattendedTransfer(targetNumber);
                } catch (error) {
                  console.error('‚ùå Unattended transfer failed:', error);
                }
              },
            },
          ],
        );
        return;
      }

      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏õ ${targetNumber}...`);

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ: ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ unattended transfer ‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
      console.log('üîÑ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Attended Transfer ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...');

      try {
        // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (consultCallRef) {
          console.log('üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤...');
          try {
            if (typeof consultCallRef.hangup === 'function') {
              await consultCallRef.hangup();
              console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else if (typeof consultCallRef.terminate === 'function') {
              await consultCallRef.terminate();
              console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (terminate)');
            } else {
              console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö consultCall');
            }
          } catch (hangupError) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ:', hangupError.message);
          }
        }

        // ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ unattended transfer
        const domain =
          config && config.domain ? config.domain : 'your-sip-domain.com';
        const targetUri = targetNumber.includes('@')
          ? targetNumber
          : `sip:${targetNumber.trim()}@${domain}`;

        console.log('üîÑ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á:', targetUri);

        // ‡πÉ‡∏ä‡πâ xferCall ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
        if (endpointRef && typeof endpointRef.xferCall === 'function') {
          await endpointRef.xferCall(accountRef, originalCallRef, targetUri);
          console.log('‚úÖ Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else if (
          originalCallRef &&
          typeof originalCallRef.transfer === 'function'
        ) {
          await originalCallRef.transfer(targetUri);
          console.log('‚úÖ Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ call.transfer)');
        } else {
          throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
        }
      } catch (error) {
        console.error('‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
      }

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      setIsInCall(false);
      setCurrentCallRef(null);
      setCurrentCallNumber('');
      setIsHold(false);
      setCallStatus('‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      setAttendedTransferState({
        originalCallRef: null,
        consultCallRef: null,
        targetNumber: '',
        step: 'idle',
        isConsulting: false,
      });

      AudioHelper.resetAudioMode();

      Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏õ ${targetNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`);

      return true;
    } catch (error) {
      console.error('‚ùå Error completing attended transfer:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const handleDirectTransferToTarget = async () => {
    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á - ‡πÉ‡∏´‡πâ caller ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤ target ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');

      // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      console.log(
        'üîç DEBUG - attendedTransferState ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:',
        JSON.stringify(attendedTransferState, null, 2),
      );
      console.log(
        'üîç DEBUG - transferTargetNumber ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:',
        transferTargetNumber,
      );
      console.log(
        'üîç DEBUG - originalCallRef ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:',
        !!attendedTransferState.originalCallRef,
      );
      console.log(
        'üîç DEBUG - consultCallRef ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:',
        !!attendedTransferState.consultCallRef,
      );
      console.log('üîç DEBUG - currentCallNumber ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', currentCallNumber);

      const { originalCallRef, consultCallRef } = attendedTransferState;

      // ‡πÉ‡∏ä‡πâ transferTargetNumber ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å attendedTransferState
      let targetNumber =
        transferTargetNumber || attendedTransferState.targetNumber;

      console.log('üîç DEBUG - targetNumber ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ:', targetNumber);
      console.log('üîç DEBUG - targetNumber type:', typeof targetNumber);
      console.log(
        'üîç DEBUG - targetNumber length:',
        targetNumber ? targetNumber.length : 'undefined',
      );

      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î targetNumber
      targetNumber = targetNumber.trim();

      console.log('‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      console.log(`üìû ‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å originalCall ‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${targetNumber}`);

      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡πâ caller ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ ${targetNumber} ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ...`);

      // Step 1: ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (consultCallRef) {
        try {
          console.log('üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤...');
          if (typeof consultCallRef.hangup === 'function') {
            await consultCallRef.hangup();
          } else if (typeof consultCallRef.terminate === 'function') {
            await consultCallRef.terminate();
          }
          console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        } catch (hangupError) {
          console.log(
            '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤:',
            hangupError.message,
          );
        }
      }

      // Step 2: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const domain =
        config && config.domain ? config.domain : 'your-sip-domain.com';
      const targetUri = targetNumber.includes('@')
        ? targetNumber
        : `sip:${targetNumber.trim()}@${domain}`;

      console.log(`üîÑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏° (caller) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${targetUri}`);

      // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      setCurrentCallRef(originalCallRef);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Hold ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô...');

        if (isHold) {
          console.log('üìû Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô...');
          await unholdCall();

          // ‡∏£‡∏≠‡πÉ‡∏´‡πâ unhold ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          await new Promise(resolve => setTimeout(resolve, 1500));

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ unhold ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (isHold) {
            console.log('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á hold ‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á...');
            await unholdCall();
            await new Promise(resolve => setTimeout(resolve, 1000));
          }

          console.log('‚úÖ ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô');
        } else {
          console.log('‚úÖ ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ hold ‡∏≠‡∏¢‡∏π‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
        AudioHelper.setCallAudioMode();
      } catch (unholdError) {
        console.log('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ unhold:', unholdError.message);
        console.log('üîÑ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ unhold');
      }

      // Step 3: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (caller ‡∏à‡∏∞‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤ target ‡πÄ‡∏•‡∏¢)
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢...');
      let transferSuccess = false;
      let transferMethod = '';

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ endpointRef.xferCall (‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)
      if (
        !transferSuccess &&
        endpointRef &&
        typeof endpointRef.xferCall === 'function'
      ) {
        try {
          console.log('üîÑ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡πÉ‡∏ä‡πâ endpointRef.xferCall...');
          await endpointRef.xferCall(accountRef, originalCallRef, targetUri);
          transferSuccess = true;
          transferMethod = 'endpointRef.xferCall';
          console.log('‚úÖ [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - caller ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡πÑ‡∏õ target');
        } catch (error) {
          console.log('‚ùå [‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      console.log(`‚úÖ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ: ${transferMethod}`);

      // Step 4: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
      console.log('üîÑ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î...');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï attended transfer state
      setAttendedTransferState({
        originalCallRef: null,
        consultCallRef: null,
        targetNumber: '',
        step: 'idle',
        isConsulting: false,
      });

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï transfer target number
      setTransferTargetNumber('');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      setCurrentCallRef(null);
      setCurrentCallNumber('');
      setIsInCall(false);
      setIsHold(false);

      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î audio mode
      try {
        AudioHelper.resetAudioMode();
        console.log('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (audioError) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode:', audioError.message);
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      setCallStatus(`‡∏™‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ú‡∏π‡πâ‡πÇ‡∏ó‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${targetNumber}`);

      // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Softphone ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
      setTimeout(() => {
        if (navigationRef && navigationRef.current) {
          navigationRef.current.navigate('Softphone');
          console.log('üì± ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Softphone ‡πÅ‡∏•‡πâ‡∏ß');
        }

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå status ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        setTimeout(() => {
          setCallStatus('');
        }, 2000);
      }, 1000);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Alert.alert(
        'üéâ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        `‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!\n\n` +
          `üìû ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:\n` +
          `‚Ä¢ ‡∏ú‡∏π‡πâ‡πÇ‡∏ó‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ${targetNumber}\n` +
          `‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: ${transferMethod}\n` +
          `‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n\n` +
          `üîó ‡∏ú‡∏π‡πâ‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞ ${targetNumber} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
        [
          {
            text: '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß',
            onPress: () => {
              console.log('‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            },
          },
        ],
      );

      console.log('‚úÖ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
      return true;
    } catch (error) {
      console.error('‚ùå Error in handleDirectTransferToTarget:', error);

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      setAttendedTransferState({
        originalCallRef: null,
        consultCallRef: null,
        targetNumber: '',
        step: 'idle',
        isConsulting: false,
      });

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï transfer target number
      setTransferTargetNumber('');

      setCallStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡πÅ‡∏™‡∏î‡∏á Transfer Keypad ‡πÅ‡∏ö‡∏ö Unattended
  const showUnattendedTransferDialog = () => {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á Transfer Keypad:');
    console.log('üìã currentCallRef:', !!currentCallRef);
    console.log('üìã isInCall:', isInCall);
    console.log('üìã endpointRef:', !!endpointRef);
    console.log('üìã accountRef:', !!accountRef);
    console.log('üìã config:', config);

    if (!currentCallRef || !isInCall) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return;
    }

    if (!endpointRef || !accountRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏∞‡∏ö‡∏ö SIP ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    setTransferType('unattended');
    setShowTransferKeypad(true);
  };

  // ‡πÅ‡∏™‡∏î‡∏á Transfer Keypad ‡πÅ‡∏ö‡∏ö Attended
  const showAttendedTransferDialog = () => {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á Attended Transfer Keypad:');
    console.log('üìã currentCallRef:', !!currentCallRef);
    console.log('üìã isInCall:', isInCall);
    console.log('üìã endpointRef:', !!endpointRef);
    console.log('üìã accountRef:', !!accountRef);

    if (!currentCallRef || !isInCall) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return;
    }

    if (!endpointRef || !accountRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏£‡∏∞‡∏ö‡∏ö SIP ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    setTransferType('attended');
    setShowTransferKeypad(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å TransferKeypad ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
  const handleTransferFromKeypad = async (targetNumber, type) => {
    try {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å target number ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏¢‡∏Å
      console.log('üîç DEBUG - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å targetNumber ‡∏à‡∏≤‡∏Å keypad:', targetNumber);
      setTransferTargetNumber(targetNumber);

      if (type === 'unattended') {
        return await unattendedTransfer(targetNumber);
      } else if (type === 'attended') {
        return await attendedTransfer(targetNumber);
      }
      return false;
    } catch (error) {
      console.error('Transfer from keypad error:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏õ‡∏¥‡∏î TransferKeypad
  const closeTransferKeypad = () => {
    setShowTransferKeypad(false);
    setTransferType('unattended');
  };

  // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ (Call Transfer)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ CallingScreen
  const navigateToCalling = navigation => {
    if (isInCall) {
      navigation.navigate('Calling');
    }
  };

  // Wrapper component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CallingScreen ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ navigationRef
  const CallingScreenWrapper = props => {
    useFocusEffect(
      React.useCallback(() => {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ navigation reference ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ CallingScreen
        if (!navigationRef && props.navigation) {
          setNavigationRef(props.navigation);
        }
      }, [props.navigation]),
    );

    return (
      <CallingScreen
        {...props}
        hangupCall={hangupCall}
        toggleHold={toggleHold}
        callStatus={callStatus}
        isInCall={isInCall}
        isHold={isHold}
        currentCallNumber={currentCallNumber}
        setCurrentCallNumber={setCurrentCallNumber}
        setCurrentCallRef={setCurrentCallRef}
        setIsInCall={setIsInCall}
        currentCallRef={currentCallRef}
        AudioHelper={AudioHelper}
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
        showUnattendedTransferDialog={showUnattendedTransferDialog}
        showAttendedTransferDialog={showAttendedTransferDialog}
        // conference handlers (from ConferenceCallManager ref)
        conference={
          conferenceRef.current ? conferenceRef.current.startConference : null
        }
        addToConference={
          conferenceRef.current ? conferenceRef.current.addToConference : null
        }
        removeFromConference={
          conferenceRef.current
            ? conferenceRef.current.removeFromConference
            : null
        }
        conferenceParticipants={
          conferenceRef.current
            ? conferenceRef.current.conferenceParticipants
            : []
        }
        isInConference={
          conferenceRef.current ? conferenceRef.current.isInConference : false
        }
        // Conference Bridge handlers
        conferenceBridge={conferenceBridgeRef.current}
        showConferenceBridge={() => { 
          if (conferenceBridgeRef.current) {
            conferenceBridgeRef.current.showModal();
          }
        }}
        startConferenceBridge={() => {
          if (conferenceBridgeRef.current) {
            return conferenceBridgeRef.current.startConference();
          }
          return false;
        }}
      />
    );
  };

  // ‡∏™‡πà‡∏á props ‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Softphone">
        <Stack.Screen name="Softphone" options={{ title: 'Convergence' }}>
          {props => (
            <ConvergenceScreen
              {...props}
              status={status}
              isConnected={isConnected}
              isInCall={isInCall}
              isHold={isHold}
              callStatus={callStatus}
              accountRef={accountRef}
              endpointRef={endpointRef}
              config={config}
              makeCall={makeCall}
              hangupCall={hangupCall}
              toggleHold={toggleHold}
              setCurrentCallNumber={setCurrentCallNumber}
              navigateToCalling={navigateToCalling}
            />
          )}
        </Stack.Screen>
        <Stack.Screen
          name="Calling"
          options={{
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£',
            headerShown: false,
            gestureEnabled: false,
          }}
          component={CallingScreenWrapper}
        />
        <Stack.Screen
          name="Contacts"
          options={{ title: '‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' }}
        >
          {props => (
            <ContactScreen
              {...props}
              makeCall={makeCall}
              setCurrentCallNumber={setCurrentCallNumber}
            />
          )}
        </Stack.Screen>
        <Stack.Screen
          name="AddContact"
          component={AddContactScreen}
          options={{ title: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' }}
        />
        <Stack.Screen
          name="AttendedTransfer"
          options={{
            title: '‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤',
            headerShown: false,
            gestureEnabled: false,
          }}
        >
          {props => (
            <AttendedTransferScreen
              {...props}
              transferManager={transferManagerRef.current}
              AudioHelper={AudioHelper}
            />
          )}
        </Stack.Screen>
        <Stack.Screen name="SIPConnector" options={{ title: 'SIP Connector' }}>
          {props => (
            <HomeScreen
              {...props}
              status={status}
              setStatus={setStatus}
              isConnected={isConnected}
              setIsConnected={setIsConnected}
              setAccountRef={setAccountRef}
              setEndpointRef={setEndpointRef}
              setCurrentCallRef={setCurrentCallRef}
              setIsInCall={setIsInCall}
              setCallStatus={setCallStatus}
              setCurrentCallNumber={setCurrentCallNumber}
              config={config}
              setConfig={setConfig}
            />
          )}
        </Stack.Screen>
      </Stack.Navigator>

      {/* Transfer Keypad Modal */}
      <TransferKeypad
        visible={showTransferKeypad}
        onClose={closeTransferKeypad}
        onTransfer={handleTransferFromKeypad}
        transferType={transferType}
        currentNumber=""
      />

      <ConferenceCallManager
        ref={conferenceRef}
        endpointRef={endpointRef}
        accountRef={accountRef}
        currentCallRef={currentCallRef}
        config={config}
        isInCall={isInCall}
        setIsInCall={setIsInCall}
        setCallStatus={setCallStatus}
        setCurrentCallRef={setCurrentCallRef}
        AudioHelper={AudioHelper}
        navigation={navigationRef}
      />

      <ConferenceBridge
        ref={conferenceBridgeRef}
        endpointRef={endpointRef}
        accountRef={accountRef}
        currentCallRef={currentCallRef}
        currentCallNumber={currentCallNumber}
        config={config}
        isInCall={isInCall}
        setIsInCall={setIsInCall}
        setCallStatus={setCallStatus}
        setCurrentCallRef={setCurrentCallRef}
        navigation={navigationRef}
      />
    </NavigationContainer>
  );
}
