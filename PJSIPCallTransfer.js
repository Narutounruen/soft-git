import { Alert } from 'react-native';

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ (Call Transfer) ‡πÉ‡∏ô PJSIP
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Unattended Transfer ‡πÅ‡∏•‡∏∞ Attended Transfer
 */
class PJSIPCallTransfer {
  constructor(endpoint = null) {
    this.endpoint = endpoint;
    this.transferCallbacks = {
      onTransferStarted: null,
      onTransferCompleted: null,
      onTransferFailed: null,
      onTransferProgress: null
    };
    this.activeTransfers = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @param {Object} endpoint - PJSIP endpoint object
   */
  setEndpoint(endpoint) {
    this.endpoint = endpoint;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callbacks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @param {Object} callbacks - Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ callback functions
   */
  setupTransferCallbacks(callbacks = {}) {
    this.transferCallbacks = {
      onTransferStarted: callbacks.onTransferStarted || this.defaultOnTransferStarted,
      onTransferCompleted: callbacks.onTransferCompleted || this.defaultOnTransferCompleted,
      onTransferFailed: callbacks.onTransferFailed || this.defaultOnTransferFailed,
      onTransferProgress: callbacks.onTransferProgress || this.defaultOnTransferProgress
    };

    console.log('‚úÖ Transfer callbacks ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }

  /**
   * Default callback functions
   */
  defaultOnTransferStarted = (callId, targetUri) => {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ - Call ID: ${callId}, Target: ${targetUri}`);
  }

  defaultOnTransferCompleted = (callId, targetUri) => {
    console.log(`‚úÖ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Call ID: ${callId}, Target: ${targetUri}`);
    Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
  }

  defaultOnTransferFailed = (callId, targetUri, error) => {
    console.log(`‚ùå ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Call ID: ${callId}, Target: ${targetUri}, Error: ${error}`);
    Alert.alert('‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error}`);
  }

  defaultOnTransferProgress = (callId, status) => {
    console.log(`üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢ - Call ID: ${callId}, Status: ${status}`);
  }

  /**
   * ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Unattended Transfer)
   * ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
   * @param {number} callId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
   * @param {string} targetUri - URI ‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô "sip:1234@domain.com")
   * @returns {Promise<boolean>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   */
  async unattendedTransfer(callId, targetUri) {
    try {
      console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Unattended - Call ID: ${callId} -> ${targetUri}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö endpoint
      if (!this.endpoint) {
        throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters
      if (!targetUri || typeof targetUri !== 'string') {
        throw new Error('Target URI ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      if (typeof callId !== 'number' || callId < 0) {
        throw new Error('Call ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      if (this.transferCallbacks.onTransferStarted) {
        this.transferCallbacks.onTransferStarted(callId, targetUri);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transferId = `transfer_${callId}_${Date.now()}`;
      this.activeTransfers.set(transferId, {
        callId,
        targetUri,
        type: 'unattended',
        startTime: new Date(),
        status: 'in_progress'
      });

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô PJSIP
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
      let transferResult;
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö API ‡∏ó‡∏µ‡πà‡∏°‡∏µ
      if (this.endpoint.transferCall) {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ transferCall method
        transferResult = await this.endpoint.transferCall(callId, targetUri);
      } else if (this.endpoint.makeCall && this.endpoint.hangupCall) {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
        transferResult = await this.performManualTransfer(callId, targetUri);
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transfer = this.activeTransfers.get(transferId);
      if (transfer) {
        transfer.status = 'completed';
        transfer.endTime = new Date();
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (this.transferCallbacks.onTransferCompleted) {
        this.transferCallbacks.onTransferCompleted(callId, targetUri);
      }

      console.log(`‚úÖ Unattended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Call ID: ${callId}`);
      return true;

    } catch (error) {
      console.error(`‚ùå Unattended Transfer ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transferEntries = Array.from(this.activeTransfers.entries());
      const failedTransfer = transferEntries.find(([_, transfer]) => 
        transfer.callId === callId && transfer.status === 'in_progress'
      );
      
      if (failedTransfer) {
        const [transferId, transfer] = failedTransfer;
        transfer.status = 'failed';
        transfer.error = error.message;
        transfer.endTime = new Date();
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (this.transferCallbacks.onTransferFailed) {
        this.transferCallbacks.onTransferFailed(callId, targetUri, error.message);
      }

      return false;
    }
  }

  /**
   * ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (Attended Transfer)
   * ‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
   * @param {number} originalCallId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
   * @param {number} newCallId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
   * @returns {Promise<boolean>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   */
  async attendedTransfer(originalCallId, newCallId) {
    try {
      console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended - Original: ${originalCallId}, New: ${newCallId}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö endpoint
      if (!this.endpoint) {
        throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters
      if (typeof originalCallId !== 'number' || originalCallId < 0) {
        throw new Error('Original Call ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      if (typeof newCallId !== 'number' || newCallId < 0) {
        throw new Error('New Call ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      if (this.transferCallbacks.onTransferStarted) {
        this.transferCallbacks.onTransferStarted(originalCallId, `attended_to_call_${newCallId}`);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transferId = `transfer_${originalCallId}_${newCallId}_${Date.now()}`;
      this.activeTransfers.set(transferId, {
        originalCallId,
        newCallId,
        type: 'attended',
        startTime: new Date(),
        status: 'in_progress'
      });

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended
      let transferResult;

      if (this.endpoint.attendedTransfer) {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ attendedTransfer method
        transferResult = await this.endpoint.attendedTransfer(originalCallId, newCallId);
      } else if (this.endpoint.transferCallToCall) {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ transferCallToCall method
        transferResult = await this.endpoint.transferCallToCall(originalCallId, newCallId);
      } else {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
        transferResult = await this.performManualAttendedTransfer(originalCallId, newCallId);
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transfer = this.activeTransfers.get(transferId);
      if (transfer) {
        transfer.status = 'completed';
        transfer.endTime = new Date();
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (this.transferCallbacks.onTransferCompleted) {
        this.transferCallbacks.onTransferCompleted(originalCallId, `attended_to_call_${newCallId}`);
      }

      console.log(`‚úÖ Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Original: ${originalCallId}, New: ${newCallId}`);
      return true;

    } catch (error) {
      console.error(`‚ùå Attended Transfer ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transferEntries = Array.from(this.activeTransfers.entries());
      const failedTransfer = transferEntries.find(([_, transfer]) => 
        transfer.originalCallId === originalCallId && transfer.status === 'in_progress'
      );
      
      if (failedTransfer) {
        const [transferId, transfer] = failedTransfer;
        transfer.status = 'failed';
        transfer.error = error.message;
        transfer.endTime = new Date();
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (this.transferCallbacks.onTransferFailed) {
        this.transferCallbacks.onTransferFailed(originalCallId, `attended_to_call_${newCallId}`, error.message);
      }

      return false;
    }
  }

  /**
   * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Unattended Transfer
   * @param {number} callId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
   * @param {string} targetUri - URI ‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
   */
  async performManualTransfer(callId, targetUri) {
    // Implementation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
    // ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    console.log(`üîß ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: ${callId} -> ${targetUri}`);
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ implement (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° API ‡∏ó‡∏µ‡πà‡∏°‡∏µ)
    // 1. Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á target
    // 3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠ target ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
    // 4. ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
    
    return true; // placeholder
  }

  /**
   * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
   * @param {number} originalCallId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
   * @param {number} newCallId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
   */
  async performManualAttendedTransfer(originalCallId, newCallId) {
    console.log(`üîß ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: ${originalCallId} + ${newCallId}`);
    
    try {
      // Implementation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Attended Transfer
      
      // Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà
      console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á...');
      
      if (!this.endpoint) {
        throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      // Step 2: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô (3-way conference)
      console.log('üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô...');
      
      let conferenceSuccess = false;

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ conference method
      if (this.endpoint.conferenceConnect && !conferenceSuccess) {
        try {
          await this.endpoint.conferenceConnect(originalCallId, newCallId);
          conferenceSuccess = true;
          console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á conference call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1)');
        } catch (error) {
          console.log('‚ùå Conference connect ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ join conference
      if (this.endpoint.joinConference && !conferenceSuccess) {
        try {
          await this.endpoint.joinConference([originalCallId, newCallId]);
          conferenceSuccess = true;
          console.log('‚úÖ Join conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2)');
        } catch (error) {
          console.log('‚ùå Join conference ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: Manual conference setup
      if (!conferenceSuccess && this.endpoint.holdCall && this.endpoint.unholdCall) {
        try {
          console.log('üîÑ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ manual conference...');
          
          // Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤ hold ‡∏≠‡∏¢‡∏π‡πà)
          await this.endpoint.unholdCall(originalCallId);
          console.log('üìû Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß');
          
          // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô active call ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
          await this.endpoint.unholdCall(newCallId);
          console.log('üìû Unhold ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß');
          
          // ‡∏£‡∏≠‡πÉ‡∏´‡πâ media ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          conferenceSuccess = true;
          console.log('‚úÖ Manual conference setup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3)');
        } catch (error) {
          console.log('‚ùå Manual conference ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÉ‡∏ä‡πâ PJSIP transfer with consultation
      if (!conferenceSuccess && this.endpoint.transferCallWithConsultation) {
        try {
          console.log('üîÑ ‡πÉ‡∏ä‡πâ transfer with consultation...');
          await this.endpoint.transferCallWithConsultation(originalCallId, newCallId);
          conferenceSuccess = true;
          console.log('‚úÖ Transfer with consultation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4)');
        } catch (error) {
          console.log('‚ùå Transfer with consultation ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        }
      }

      if (!conferenceSuccess) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      }

      // Step 3: ‡∏£‡∏≠‡πÉ‡∏´‡πâ conference ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
      console.log('‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ conference ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£...');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Step 4: ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference (‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á)
      console.log('üö™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference...');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const transferData = {
        originalCallId,
        newCallId,
        conferenceMethod: conferenceSuccess ? 'success' : 'failed',
        timestamp: new Date().toISOString(),
        status: 'completed'
      };

      console.log('‚úÖ Attended Transfer ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:', transferData);
      
      return transferData;

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Manual Attended Transfer:', error);
      throw new Error(`Manual Attended Transfer ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
  }

  /**
   * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
   * @param {number} callId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
   */
  async cancelTransfer(callId) {
    try {
      console.log(`üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢: ${callId}`);

      // ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
      const transferEntries = Array.from(this.activeTransfers.entries());
      const activeTransfer = transferEntries.find(([_, transfer]) => 
        (transfer.callId === callId || transfer.originalCallId === callId) && 
        transfer.status === 'in_progress'
      );

      if (!activeTransfer) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà');
      }

      const [transferId, transfer] = activeTransfer;

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      if (this.endpoint.cancelTransfer) {
        await this.endpoint.cancelTransfer(callId);
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      transfer.status = 'cancelled';
      transfer.endTime = new Date();

      console.log(`‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${callId}`);
      return true;

    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ:`, error);
      return false;
    }
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer
   * @param {Object} originalCall - ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
   * @param {string} targetUri - URI ‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ
   * @returns {Promise<Object>} - Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
   */
  async startAttendedTransfer(originalCall, targetUri) {
    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer...');
      
      if (!this.endpoint) {
        throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      if (!originalCall) {
        throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏≠‡∏ô');
      }

      if (!targetUri) {
        throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ URI ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á');
      }

      // Step 1: Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
      console.log('üìû Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°...');
      if (this.endpoint.holdCall) {
        await this.endpoint.holdCall(originalCall);
      } else if (originalCall.hold) {
        await originalCall.hold();
      } else {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hold ‡∏™‡∏≤‡∏¢');
      }

      // Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      console.log(`üìû ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${targetUri}`);
      let consultCall;
      
      if (this.endpoint.makeCall) {
        consultCall = await this.endpoint.makeCall(targetUri);
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ');
      }

      // Step 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      const transferId = `attended_${Date.now()}`;
      this.activeTransfers.set(transferId, {
        type: 'attended',
        originalCall,
        consultCall,
        targetUri,
        status: 'consulting',
        startTime: new Date()
      });

      console.log('‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      if (this.transferCallbacks.onTransferStarted) {
        this.transferCallbacks.onTransferStarted(originalCall._callId || originalCall.id, targetUri);
      }

      return {
        transferId,
        originalCall,
        consultCall,
        targetUri,
        status: 'consulting'
      };

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Attended Transfer ‡πÑ‡∏î‡πâ:', error);
      throw error;
    }
  }

  /**
   * ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer
   * @param {string} transferId - ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @returns {Promise<boolean>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   */
  async completeAttendedTransfer(transferId) {
    try {
      const transfer = this.activeTransfers.get(transferId);
      if (!transfer) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      }

      const { originalCall, consultCall, targetUri } = transfer;
      
      console.log('üîÑ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô Attended Transfer...');

      // ‡πÉ‡∏ä‡πâ method performManualAttendedTransfer ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
      await this.performManualAttendedTransfer(
        originalCall._callId || originalCall.id,
        consultCall._callId || consultCall.id
      );

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
      transfer.status = 'completed';
      transfer.endTime = new Date();

      if (this.transferCallbacks.onTransferCompleted) {
        this.transferCallbacks.onTransferCompleted(originalCall._callId || originalCall.id, targetUri);
      }

      console.log('‚úÖ Attended Transfer ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
      return true;

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô Attended Transfer ‡πÑ‡∏î‡πâ:', error);
      
      const transfer = this.activeTransfers.get(transferId);
      if (transfer) {
        transfer.status = 'failed';
        transfer.error = error.message;
        transfer.endTime = new Date();
      }

      if (this.transferCallbacks.onTransferFailed) {
        this.transferCallbacks.onTransferFailed(
          transfer?.originalCall?._callId || 'unknown',
          transfer?.targetUri || 'unknown',
          error.message
        );
      }

      return false;
    }
  }

  /**
   * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Attended Transfer
   * @param {string} transferId - ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @returns {Promise<boolean>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
   */
  async cancelAttendedTransfer(transferId) {
    try {
      const transfer = this.activeTransfers.get(transferId);
      if (!transfer) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢');
      }

      const { originalCall, consultCall } = transfer;
      
      console.log('üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Attended Transfer...');

      // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
      if (consultCall) {
        try {
          if (consultCall.hangup) {
            await consultCall.hangup();
          } else if (this.endpoint.hangupCall) {
            await this.endpoint.hangupCall(consultCall);
          }
          console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        } catch (error) {
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ:', error.message);
        }
      }

      // Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
      if (originalCall) {
        try {
          if (this.endpoint.unholdCall) {
            await this.endpoint.unholdCall(originalCall);
          } else if (originalCall.unhold) {
            await originalCall.unhold();
          }
          console.log('‚úÖ Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß');
        } catch (error) {
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ:', error.message);
        }
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      transfer.status = 'cancelled';
      transfer.endTime = new Date();

      console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Attended Transfer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Attended Transfer ‡πÑ‡∏î‡πâ:', error);
      return false;
    }
  }

  /**
   * ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   * @returns {Array} - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getActiveTransfers() {
    return Array.from(this.activeTransfers.values());
  }

  /**
   * ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
   * @param {string} transferId - ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @returns {Object|null} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   */
  getTransferById(transferId) {
    return this.activeTransfers.get(transferId) || null;
  }

  /**
   * ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô Attended Transfer
   * @param {string} transferId - ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @returns {Promise<string>} - ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active ('original' ‡∏´‡∏£‡∏∑‡∏≠ 'consult')
   */
  async switchBetweenCalls(transferId) {
    try {
      const transfer = this.activeTransfers.get(transferId);
      if (!transfer || transfer.type !== 'attended') {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Attended Transfer');
      }

      const { originalCall, consultCall } = transfer;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà
      let currentActiveCall = transfer.activeCall || 'original';
      
      if (currentActiveCall === 'original') {
        // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: Hold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°, Unhold ‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
        console.log('üîÑ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤...');
        
        if (this.endpoint.holdCall) {
          await this.endpoint.holdCall(originalCall);
        }
        
        if (this.endpoint.unholdCall) {
          await this.endpoint.unholdCall(consultCall);
        }
        
        transfer.activeCall = 'consult';
        console.log('‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        return 'consult';
        
      } else {
        // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°: Hold ‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤, Unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
        console.log('üîÑ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°...');
        
        if (this.endpoint.holdCall) {
          await this.endpoint.holdCall(consultCall);
        }
        
        if (this.endpoint.unholdCall) {
          await this.endpoint.unholdCall(originalCall);
        }
        
        transfer.activeCall = 'original';
        console.log('‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß');
        return 'original';
      }

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á 3-way conference ‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
   * @param {string} transferId - ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢
   * @returns {Promise<boolean>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á conference
   */
  async createThreeWayConference(transferId) {
    try {
      const transfer = this.activeTransfers.get(transferId);
      if (!transfer || transfer.type !== 'attended') {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Attended Transfer');
      }

      const { originalCall, consultCall } = transfer;
      
      console.log('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á 3-way conference...');

      // ‡πÉ‡∏ä‡πâ performManualAttendedTransfer ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference
      const result = await this.performManualAttendedTransfer(
        originalCall._callId || originalCall.id,
        consultCall._callId || consultCall.id
      );

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô conference
      transfer.status = 'conference';
      transfer.conferenceStartTime = new Date();

      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á 3-way conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á 3-way conference ‡πÑ‡∏î‡πâ:', error);
      return false;
    }
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
   */
  clearCompletedTransfers() {
    const completedTransfers = [];
    
    for (const [transferId, transfer] of this.activeTransfers.entries()) {
      if (transfer.status !== 'in_progress') {
        completedTransfers.push(transferId);
      }
    }

    completedTransfers.forEach(id => this.activeTransfers.delete(id));
    
    console.log(`üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${completedTransfers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  reset() {
    this.activeTransfers.clear();
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }
}

export default PJSIPCallTransfer;
