// CallManager.js - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
export class CallManager {
  /**
   * ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {Object} endpointRef - Endpoint reference
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async hangupCall(callRef, endpointRef = null) {
    if (!callRef) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏á');
      return false;
    }

    let terminated = false;

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ call.hangup()
    if (!terminated && typeof callRef.hangup === 'function') {
      try {
        await callRef.hangup();
        console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ hangup()');
        terminated = true;
      } catch (error) {
        console.log('‚ùå hangup() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
      }
    }

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ call.terminate()
    if (!terminated && typeof callRef.terminate === 'function') {
      try {
        await callRef.terminate();
        console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ terminate()');
        terminated = true;
      } catch (error) {
        console.log('‚ùå terminate() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
      }
    }

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ endpoint.hangupCall()
    if (!terminated && endpointRef && typeof endpointRef.hangupCall === 'function') {
      try {
        await endpointRef.hangupCall(callRef);
        console.log('‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ endpoint.hangupCall()');
        terminated = true;
      } catch (error) {
        console.log('‚ùå endpoint.hangupCall() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
      }
    }

    return terminated;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @returns {string} - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   */
  static getCallStatus(callRef) {
    if (!callRef) return 'no_call';
    
    if (callRef.state) {
      return callRef.state;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö properties ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    if (callRef.isConnected && callRef.isConnected()) {
      return 'connected';
    }
    
    return 'unknown';
  }

  /**
   * Mute/Unmute ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {boolean} shouldMute - true = mute, false = unmute
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async setMute(callRef, shouldMute) {
    if (!callRef || typeof callRef.mute !== 'function') {
      console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ mute/unmute ‡πÑ‡∏î‡πâ');
      return false;
    }

    try {
      await callRef.mute(shouldMute);
      console.log(`‚úÖ ${shouldMute ? 'Mute' : 'Unmute'} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return true;
    } catch (error) {
      console.log(`‚ùå ${shouldMute ? 'Mute' : 'Unmute'} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
      return false;
    }
  }

  /**
   * Hold ‡∏™‡∏≤‡∏¢ - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô App.js
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {Object} endpointRef - Endpoint reference
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async holdCall(callRef, endpointRef) {
    if (!callRef) {
      throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
    }

    try {
      let holdSuccess = false;

      // ‡πÉ‡∏ä‡πâ endpoint holdCall
      if (endpointRef && endpointRef.holdCall) {
        try {
          await endpointRef.holdCall(callRef);
          holdSuccess = true;
        } catch (error) {
          console.log('Hold failed:', error);
        }
      }

      if (holdSuccess) {
        return true;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Hold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Hold call error:', error);
      throw error;
    }
  }

  /**
   * Unhold ‡∏™‡∏≤‡∏¢ - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô App.js
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {Object} endpointRef - Endpoint reference
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async unholdCall(callRef, endpointRef) {
    if (!callRef) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Unhold');
    }

    try {
      let unholdSuccess = false;

      // ‡πÉ‡∏ä‡πâ endpoint unholdCall
      if (endpointRef && endpointRef.unholdCall) {
        try {
          await endpointRef.unholdCall(callRef);
          unholdSuccess = true;
        } catch (error) {
          console.log('Unhold failed:', error);
        }
      }

      if (unholdSuccess) {
        return true;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Unhold ‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('Unhold call error:', error);
      throw error;
    }
  }

  /**
   * Hold/Unhold ‡∏™‡∏≤‡∏¢ (‡∏£‡∏ß‡∏° 2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @param {boolean} shouldHold - true = hold, false = unhold
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async setHold(callRef, shouldHold) {
    if (!callRef) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á hold/unhold');
      return false;
    }

    const method = shouldHold ? 'hold' : 'unhold';
    
    if (typeof callRef[method] === 'function') {
      try {
        await callRef[method]();
        console.log(`‚úÖ ${shouldHold ? 'Hold' : 'Unhold'} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        return true;
      } catch (error) {
        console.log(`‚ùå ${shouldHold ? 'Hold' : 'Unhold'} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
        return false;
      }
    }

    console.log(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ${method}()`);
    return false;
  }

  /**
   * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å
   * @param {Object} endpointRef - Endpoint reference
   * @param {Object} accountRef - Account reference  
   * @param {string} callUri - URI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏ó‡∏£‡πÑ‡∏õ
   * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   * @returns {Object|null} - Call object ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  static async makeCall(endpointRef, accountRef, callUri, options = {}) {
    if (!endpointRef || !accountRef || !callUri) {
      console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£');
      return null;
    }

    try {
      console.log(`üìû ‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${callUri}`);
      const call = await endpointRef.makeCall(accountRef, callUri, options);
      console.log('‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return call;
    } catch (error) {
      console.log('‚ùå ‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
      throw error;
    }
  }
}