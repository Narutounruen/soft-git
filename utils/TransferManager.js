// TransferManager.js - р╕гр╕зр╕Ър╕гр╕зр╕бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕▓р╕гр╣Вр╕нр╕Щр╕кр╕▓р╕вр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Лр╣Йр╕│
import { CallManager } from './CallManager.js';

export class TransferManager {
  /**
   * р╕кр╕гр╣Йр╕▓р╕З SIP URI р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕нр╕Щр╕кр╕▓р╕в
   * @param {string} targetNumber - р╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕Ыр╕ер╕▓р╕вр╕Чр╕▓р╕З
   * @param {Object} config - р╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ SIP
   * @returns {string} - SIP URI
   */
  static createSipUri(targetNumber, config) {
    if (targetNumber.includes('@')) {
      return targetNumber;
    }

    const domain = config && config.domain ? config.domain : 'your-sip-domain.com';
    return `sip:${targetNumber.trim()}@${domain}`;
  }

  /**
   * р╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Бр╕Ър╕Ъ Unattended (р╣Вр╕нр╕Щр╕Чр╕▒р╕Щр╕Чр╕╡)
   * @param {Object} params - р╕Юр╕▓р╕гр╕▓р╕бр╕┤р╣Ар╕Хр╕нр╕гр╣М { endpointRef, accountRef, currentCallRef, targetNumber, config }
   * @returns {boolean} - р╕кр╕│р╣Ар╕гр╣Зр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И
   */
  static async performUnattendedTransfer({ 
    endpointRef, 
    accountRef, 
    currentCallRef, 
    targetNumber, 
    config 
  }) {
    try {
      const targetUri = this.createSipUri(targetNumber, config);
      console.log('ЁЯФД р╣Ар╕гр╕┤р╣Ир╕бр╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Бр╕Ър╕Ъ Unattended р╣Др╕Ы:', targetUri);

      let transferSuccess = false;

      // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 1: р╣Гр╕Кр╣Й endpointRef.xferCall
      if (!transferSuccess && endpointRef && typeof endpointRef.xferCall === 'function') {
        try {
          await endpointRef.xferCall(accountRef, currentCallRef, targetUri);
          transferSuccess = true;
          console.log('тЬЕ р╣Вр╕нр╕Щр╕кр╕▓р╕вр╕кр╕│р╣Ар╕гр╣Зр╕Ир╕Фр╣Йр╕зр╕в endpointRef.xferCall');
        } catch (error) {
          console.log('тЭМ endpointRef.xferCall р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
        }
      }

      // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 2: р╣Гр╕Кр╣Й currentCallRef.transfer
      if (!transferSuccess && currentCallRef && typeof currentCallRef.transfer === 'function') {
        try {
          await currentCallRef.transfer(targetUri);
          transferSuccess = true;
          console.log('тЬЕ р╣Вр╕нр╕Щр╕кр╕▓р╕вр╕кр╕│р╣Ар╕гр╣Зр╕Ир╕Фр╣Йр╕зр╕в currentCallRef.transfer');
        } catch (error) {
          console.log('тЭМ currentCallRef.transfer р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
        }
      }

      // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 3: р╣Гр╕Кр╣Й endpointRef.transferCall
      if (!transferSuccess && endpointRef && typeof endpointRef.transferCall === 'function') {
        try {
          await endpointRef.transferCall(currentCallRef, targetUri);
          transferSuccess = true;
          console.log('тЬЕ р╣Вр╕нр╕Щр╕кр╕▓р╕вр╕кр╕│р╣Ар╕гр╣Зр╕Ир╕Фр╣Йр╕зр╕в endpointRef.transferCall');
        } catch (error) {
          console.log('тЭМ endpointRef.transferCall р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
        }
      }

      if (!transferSuccess) {
        throw new Error('р╣Др╕бр╣Ир╕Юр╕Ър╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Вр╕нр╕Щр╕кр╕▓р╕вр╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й');
      }

      return true;
    } catch (error) {
      console.error('тЭМ р╕Бр╕▓р╕гр╣Вр╕нр╕Щр╕кр╕▓р╕вр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
      return false;
    }
  }

  /**
   * р╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Бр╕Ър╕Ъ Attended (р╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╕Бр╣Ир╕нр╕Щр╣Вр╕нр╕Щ)
   * @param {Object} params - р╕Юр╕▓р╕гр╕▓р╕бр╕┤р╣Ар╕Хр╕нр╕гр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕нр╕Щр╕кр╕▓р╕в
   * @returns {boolean} - р╕кр╕│р╣Ар╕гр╣Зр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И
   */
  static async performAttendedTransfer({ 
    endpointRef, 
    accountRef, 
    originalCallRef, 
    consultCallRef, 
    targetNumber, 
    config 
  }) {
    try {
      const targetUri = this.createSipUri(targetNumber, config);
      console.log('ЁЯФД р╣Ар╕гр╕┤р╣Ир╕бр╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Бр╕Ър╕Ъ Attended р╣Др╕Ы:', targetUri);

      // р╕зр╕▓р╕Зр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╕Бр╣Ир╕нр╕Щ (р╕Цр╣Йр╕▓р╕бр╕╡)
      if (consultCallRef) {
        try {
          await CallManager.hangupCall(consultCallRef);
          console.log('тЬЕ р╕зр╕▓р╕Зр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╣Бр╕ер╣Йр╕з');
        } catch (error) {
          console.log('тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕зр╕▓р╕Зр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╣Др╕Фр╣Й:', error.message);
        }
      }

      // р╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Ар╕Фр╕┤р╕б
      return await this.performUnattendedTransfer({
        endpointRef,
        accountRef,
        currentCallRef: originalCallRef,
        targetNumber,
        config
      });
    } catch (error) {
      console.error('тЭМ р╕Бр╕▓р╕гр╣Вр╕нр╕Щр╕кр╕▓р╕вр╣Бр╕Ър╕Ъ Attended р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
      return false;
    }
  }

  /**
   * р╣Ар╕гр╕┤р╣Ир╕бр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ъ Attended Transfer
   * @param {Object} params - р╕Юр╕▓р╕гр╕▓р╕бр╕┤р╣Ар╕Хр╕нр╕гр╣М { endpointRef, accountRef, targetNumber, config }
   * @returns {Object|null} - Call reference р╕лр╕гр╕╖р╕н null
   */
  static async startConsultCall({ endpointRef, accountRef, targetNumber, config }) {
    try {
      const targetUri = this.createSipUri(targetNumber, config);
      console.log('ЁЯУЮ р╣Ар╕гр╕┤р╣Ир╕бр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╣Др╕Ы:', targetUri);

      const consultCall = await endpointRef.makeCall(accountRef, targetUri, {
        headers: {
          'X-Transfer-Type': 'Consult-Call',
        },
      });

      console.log('тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И');
      return consultCall;
    } catch (error) {
      console.error('тЭМ р╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕▓р╕вр╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message);
      return null;
    }
  }

  /**
   * р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕кр╕▓р╕вр╕Бр╣Ир╕нр╕Щр╣Вр╕нр╕Щ
   * @param {Object} callRef - Reference р╕Вр╕нр╕Зр╕кр╕▓р╕в
   * @param {Function} unholdFunction - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ unhold
   * @returns {boolean} - р╕Юр╕гр╣Йр╕нр╕бр╣Вр╕нр╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
   */
  static async prepareCallForTransfer(callRef, unholdFunction = null) {
    if (!callRef) {
      console.log('тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕кр╕▓р╕вр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Вр╕нр╕Щ');
      return false;
    }

    try {
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕кр╕▓р╕вр╕нр╕вр╕╣р╣Ир╣Гр╕Щ hold р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const isOnHold = callRef.isOnHold ? callRef.isOnHold() : false;
      
      if (isOnHold && unholdFunction) {
        console.log('ЁЯУЮ Unhold р╕кр╕▓р╕вр╕Бр╣Ир╕нр╕Щр╣Вр╕нр╕Щ...');
        await unholdFunction();
        
        // р╕гр╕нр╣Гр╕лр╣Й unhold р╣Ар╕кр╕гр╣Зр╕И
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      console.log('тЬЕ р╕кр╕▓р╕вр╕Юр╕гр╣Йр╕нр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Вр╕нр╕Щр╣Бр╕ер╣Йр╕з');
      return true;
    } catch (error) {
      console.error('тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕кр╕▓р╕вр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Вр╕нр╕Щ:', error.message);
      return false;
    }
  }
}