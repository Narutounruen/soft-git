// AudioManager.js - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
import Sound from 'react-native-sound';
import InCallManager from 'react-native-incall-manager';
import { Platform, Vibration, NativeModules } from 'react-native';

export class AudioManager {
  /**
   * ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
   * @param {Object} ringtoneRef - Reference ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤
   */
  static stopAllRingtones(ringtoneRef = null) {
    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å Sound library
    if (ringtoneRef && ringtoneRef.current) {
      try {
        if (ringtoneRef.current.isPlaying && ringtoneRef.current.isPlaying()) {
          ringtoneRef.current.stop();
        }
        ringtoneRef.current.setNumberOfLoops(0);
      } catch (error) {
        console.error('Error stopping Sound library ringtone:', error);
      }
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô
    try {
      Vibration.cancel();
    } catch (error) {
      console.error('Error stopping vibration:', error);
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å InCallManager (‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    try {
      InCallManager.stopRingtone();
      InCallManager.stop({ busytone: false }); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á busytone
    } catch (error) {
      console.error('Error stopping InCallManager:', error);
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio category
    try {
      Sound.setCategory('Ambient');
      Sound.setActive(false);
    } catch (error) {
      console.error('Error resetting audio category:', error);
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static setCallAudioMode() {
    try {
      // ‡πÉ‡∏ä‡πâ InCallManager ‡πÅ‡∏ï‡πà‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á connect/disconnect
      InCallManager.start({ 
        media: 'audio', 
        auto: false,  // ‡∏õ‡∏¥‡∏î auto sound
        ringback: false  // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á ringback
      });
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Sound library
      Sound.setCategory('PlayAndRecord', true);
      Sound.setActive(true);

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android ‡πÉ‡∏ä‡πâ Native Module
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.setCallAudioMode()
          .catch(error => console.error('Native audio mode error:', error));
      }

      console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ call audio mode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á connect/disconnect)');
      return true;
    } catch (error) {
      console.error('‚ùå Error setting call audio mode:', error);
      return false;
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static resetAudioMode() {
    try {
      // ‡∏´‡∏¢‡∏∏‡∏î InCallManager ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á disconnect
      InCallManager.stop({ busytone: false });
      
      Sound.setCategory('Ambient');
      Sound.setActive(false);

      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        NativeModules.AudioManagerModule.resetAudioMode()
          .catch(error => console.error('Native reset audio error:', error));
      }

      console.log('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á disconnect)');
      return true;
    } catch (error) {
      console.error('‚ùå Error resetting audio mode:', error);
      return false;
    }
  }

  /**
   * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
   * @param {Object} callRef - Reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async forceMicrophoneEnable(callRef = null) {
    try {
      console.log('üé§ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô...');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio session
      this.setCallAudioMode();

      // ‡πÉ‡∏ä‡πâ Native Module ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        try {
          await NativeModules.AudioManagerModule.forceMicrophoneEnable();
        } catch (error) {
          console.error('Native microphone enable error:', error);
        }
      }

      // Unmute ‡πÉ‡∏ô call object
      if (callRef && typeof callRef.mute === 'function') {
        try {
          await callRef.mute(false);
        } catch (error) {
          console.error('Call unmute error:', error);
        }
      }

      console.log('‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (error) {
      console.error('‚ùå Error forcing microphone enable:', error);
      return false;
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
   * @param {boolean} enable - true = ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á, false = ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static async setSpeakerphone(enable) {
    try {
      if (Platform.OS === 'android' && NativeModules.AudioManagerModule) {
        if (enable) {
          await NativeModules.AudioManagerModule.enableSpeaker();
        } else {
          await NativeModules.AudioManagerModule.disableSpeaker();
        }
      }

      // ‡πÉ‡∏ä‡πâ InCallManager
      InCallManager.setSpeakerphoneOn(enable);
      
      console.log(`‚úÖ ${enable ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}‡∏•‡∏≥‡πÇ‡∏û‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      return true;
    } catch (error) {
      console.error(`‚ùå Error ${enable ? 'enabling' : 'disabling'} speakerphone:`, error);
      return false;
    }
  }

  /**
   * ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static muteMicrophone() {
    try {
      InCallManager.setMicrophoneMute(true);
      console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (error) {
      console.error('‚ùå Error muting microphone:', error);
      return false;
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static unmuteMicrophone() {
    try {
      InCallManager.setMicrophoneMute(false);
      console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (error) {
      console.error('‚ùå Error unmuting microphone:', error);
      return false;
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static enableSpeaker() {
    return this.setSpeakerphone(true);
  }

  /**
   * ‡∏õ‡∏¥‡∏î‡∏•‡∏≥‡πÇ‡∏û‡∏á
   * @returns {boolean} - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static disableSpeaker() {
    return this.setSpeakerphone(false);
  }
}