import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Alert, FlatList, TextInput } from 'react-native';
import { AudioManager } from './AudioManager';

// ConferenceCallManager Component
const ConferenceCallManager = forwardRef(({
  endpointRef,
  accountRef,
  currentCallRef,
  config,
  isInCall,
  setIsInCall,
  setCallStatus,
  setCurrentCallRef,
  navigation
}, ref) => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ conference
  const [isInConference, setIsInConference] = useState(false);
  const [conferenceParticipants, setConferenceParticipants] = useState([]);
  const [conferenceCallRef, setConferenceCallRef] = useState(null);
  const [showConferenceModal, setShowConferenceModal] = useState(false);
  const [newParticipantNumber, setNewParticipantNumber] = useState('');

  // Ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö call ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô conference
  const pendingCallRef = useRef(null);

  // helper to resolve ref or plain object
  const resolve = (maybeRef) => (maybeRef && (maybeRef.current || maybeRef)) || null;

  // helper to try to unhold a call (many endpoints provide call.unhold() or ep.unholdCall)
  const tryUnhold = async (callObj) => {
    try {
      const ep = resolve(endpointRef);
      const call = callObj || resolve(currentCallRef);
      if (!call) return;

      if (typeof call.unhold === 'function') {
        await call.unhold();
        console.log('‚ÑπÔ∏è unhold via call.unhold()');
        return;
      }

      if (ep && typeof ep.unholdCall === 'function') {
        await ep.unholdCall(call);
        console.log('‚ÑπÔ∏è unhold via endpoint.unholdCall()');
        return;
      }

      // Some call objects use hold(false) or mute pattern
      if (typeof call.hold === 'function') {
        try {
          await call.hold(false);
          console.log('‚ÑπÔ∏è attempted call.hold(false) to unhold');
        } catch (e) { /* ignore */ }
      }
    } catch (e) {
      console.log('‚ö†Ô∏è tryUnhold failed:', e.message || e);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Conference Bridge
  const bridgeConferenceMode = async () => {
    try {
      console.log('üéØ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ Bridge Conference Mode...');
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î conference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å call
      const calls = [...conferenceParticipants, currentCallRef].filter(Boolean);
      
      for (const participant of calls) {
        const call = participant.callRef || participant;
        if (call) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ call ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å
          await tryUnhold(call);
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á speaker
          const ep = resolve(endpointRef);
          if (ep && ep.setCallAudioRoute && typeof ep.setCallAudioRoute === 'function') {
            try {
              await ep.setCallAudioRoute(call, 'speaker');
            } catch (error) {
              console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ audio route ‡πÑ‡∏î‡πâ:', error.message);
            }
          }
        }
      }
      
      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î speaker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö conference
      try {
        await AudioManager.enableSpeaker();
        console.log('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Speaker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Speaker ‡πÑ‡∏î‡πâ:', error.message);
      }
      
      setCallStatus('üìû Conference Bridge Mode ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error enabling bridge conference mode:', error);
      setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Conference Bridge Mode ‡πÑ‡∏î‡πâ');
      return false;
    }
  };
  const startConference = async () => {
    // Resolve the actual call object (support both ref objects and plain values)
    const currentCall = resolve(currentCallRef);
    if (!currentCall) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£‡∏≠‡∏¢‡∏π‡πà');
      return false;
    }

    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference Call...');
      setCallStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° Conference...');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á conference call ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const ep = resolve(endpointRef);
      const acc = resolve(accountRef);

      if (!ep) throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

      let conferenceCall = null;

      if (typeof ep.createConferenceCall === 'function') {
        // try to call with an explicit no-hold option if supported
        try {
          conferenceCall = await ep.createConferenceCall(acc, currentCall, { hold: false });
        } catch (e) {
          conferenceCall = await ep.createConferenceCall(acc, currentCall);
        }
      } else if (typeof ep.createConference === 'function') {
        try {
          conferenceCall = await ep.createConference(acc, currentCall, { hold: false });
        } catch (e) {
          conferenceCall = await ep.createConference(acc, currentCall);
        }
      } else {
        // Fallback: endpoint doesn't provide a conference creation API.
        // Use the current call as the 'conference root' and mark conference active.
        console.log('‚ÑπÔ∏è Endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ createConference API ‚Äî ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô conference root (fallback)');
        conferenceCall = currentCall;
      }

      if (conferenceCall) {
        setConferenceCallRef(conferenceCall);
        setIsInConference(true);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô participant ‡πÅ‡∏£‡∏Å (‡πÉ‡∏ä‡πâ resolved currentCall)
        const getCurrentNumber = () => {
          try {
            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
            if (currentCall && currentCall.getRemoteUri) {
              const remoteUri = currentCall.getRemoteUri();
              return remoteUri.split('@')[0].replace('sip:', '');
            }
            if (currentCallRef && currentCallRef.getRemoteUri) {
              const remoteUri = currentCallRef.getRemoteUri();
              return remoteUri.split('@')[0].replace('sip:', '');
            }
            if (currentCall && currentCall.remoteNumber) {
              return currentCall.remoteNumber;
            }
            if (currentCall && currentCall.remoteContact) {
              return currentCall.remoteContact.split('@')[0].replace('sip:', '');
            }
            if (currentCallRef && currentCallRef.remoteNumber) {
              return currentCallRef.remoteNumber;
            }
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å call ID
            const callId = currentCall._callId || currentCall.id || (currentCallRef && (currentCallRef._callId || currentCallRef.id));
            return callId ? `Call-${callId}` : '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
          } catch (error) {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ:', error.message);
            return '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô';
          }
        };

        const participants = [{
          id: currentCall._callId || currentCall.id || (currentCallRef && (currentCallRef._callId || currentCallRef.id)) || String(Date.now()),
          number: getCurrentNumber(),
          callRef: currentCall || currentCallRef
        }];

        setConferenceParticipants(participants);
        setCallStatus('Conference ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß');

        console.log('‚úÖ Conference ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (fallback if needed)');
        return true;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Conference ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('‚ùå Error starting conference:', error);
      setCallStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference ‡πÑ‡∏î‡πâ');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference ‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô conference
  const addToConference = async (participantNumber) => {
    if (!participantNumber || !participantNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°');
      return false;
    }

    if (!isInConference || !conferenceCallRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° Conference');
      return false;
    }

    try {
      console.log(`üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢ ${participantNumber} ‡πÉ‡∏ô Conference...`);
      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ${participantNumber}...`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
      const domain = config.domain || 'your-sip-domain.com';
      const targetUri = participantNumber.includes('@') 
        ? participantNumber 
        : `sip:${participantNumber.trim()}@${domain}`;

  // ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà
  const ep = resolve(endpointRef);
  const acc = resolve(accountRef);
  if (!ep) throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

  const makeCallFn = ep.makeCall || ep.call || ep.startCall;
  if (!makeCallFn) throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å');

  const newCall = await makeCallFn.call(ep, acc, targetUri);
      
      if (newCall) {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        const checkConnection = () => {
          if (newCall.state === 'PJSIP_INV_STATE_CONFIRMED') {
            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö conference
            const epConnect = ep.conferenceConnect || ep.connectConference || ep.addToConference;
            if (!epConnect) throw new Error('Endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ conference');

            // try non-hold connect options first
            const tryConnect = async () => {
              try {
                if (epConnect.length >= 3) {
                  // some implementations accept options as third arg
                  return await epConnect.call(ep, conferenceCallRef, newCall, { hold: false });
                }
                return await epConnect.call(ep, conferenceCallRef, newCall);
              } catch (e) {
                // fallback to basic call
                return await epConnect.call(ep, conferenceCallRef, newCall);
              }
            };

                tryConnect()
                  .then(async () => {
                    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ participants
                    const newParticipant = {
                      id: newCall._callId || newCall.id || Date.now().toString(),
                      number: participantNumber.trim(),
                      callRef: newCall
                    };

                    setConferenceParticipants(prev => [...prev, newParticipant]);
                    setCallStatus(`üìû ${participantNumber} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Conference ‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏ß‡∏° ${conferenceParticipants.length + 1} ‡∏™‡∏≤‡∏¢`);

                    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° unhold ‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤ endpoint/SDK ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ hold ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    try {
                      await tryUnhold(newCall);
                      await tryUnhold(conferenceCallRef || resolve(currentCallRef));
                    } catch (e) {
                      console.log('‚ö†Ô∏è Failed to unhold after connect:', e);
                    }

                    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå pending call
                    pendingCallRef.current = null;
                  })
              .catch((error) => {
                console.error('‚ùå Error connecting to conference:', error);
                setCallStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÉ‡∏ô Conference ‡πÑ‡∏î‡πâ');
                Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÉ‡∏ô Conference ‡πÑ‡∏î‡πâ');
                
                // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                if (newCall && typeof newCall.hangup === 'function') {
                  newCall.hangup();
                }
              });
          } else if (newCall.state === 'PJSIP_INV_STATE_DISCONNECTED') {
            // ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
            console.log('‚ùå ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢');
            setCallStatus(`${participantNumber} ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢`);
            Alert.alert('‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢', `${participantNumber} ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢`);
            pendingCallRef.current = null;
          } else {
            // ‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(checkConnection, 1000);
          }
        };

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        setTimeout(checkConnection, 1000);
        
        // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
        pendingCallRef.current = newCall;
        
        return true;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      console.error('‚ùå Error adding to conference:', error);
      setCallStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÉ‡∏ô Conference ‡πÑ‡∏î‡πâ');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference
  const removeFromConference = async (participant) => {
    if (!participant || !participant.callRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
      return false;
    }

    try {
      console.log(`üîÑ ‡∏•‡∏ö‡∏™‡∏≤‡∏¢ ${participant.number} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference...`);
      setCallStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${participant.number}...`);

      // ‡∏ñ‡∏≠‡∏î‡∏™‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å conference
      const ep = resolve(endpointRef);
      const epDisconnect = ep && (ep.conferenceDisconnect || ep.disconnectConference || ep.removeFromConference);
      if (epDisconnect) {
        await epDisconnect.call(ep, conferenceCallRef, participant.callRef);
      }

      // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á participant
      if (participant.callRef && typeof participant.callRef.hangup === 'function') {
        await participant.callRef.hangup();
      }

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
      setConferenceParticipants(prev => 
        prev.filter(p => p.id !== participant.id)
      );

      setCallStatus(`${participant.number} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡πÅ‡∏•‡πâ‡∏ß`);
      console.log('‚úÖ ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      return true;
    } catch (error) {
      console.error('‚ùå Error removing from conference:', error);
      setCallStatus('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡πÑ‡∏î‡πâ');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ${error.message}`);
      return false;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î conference
  const endConference = async () => {
    try {
      console.log('üîÑ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference...');
      setCallStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference...');

      // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô conference
      for (const participant of conferenceParticipants) {
        if (participant.callRef && typeof participant.callRef.hangup === 'function') {
          try {
            await participant.callRef.hangup();
          } catch (error) {
            console.log(`‚ö†Ô∏è Error hanging up ${participant.number}:`, error);
          }
        }
      }

      // ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢ conference ‡∏´‡∏•‡∏±‡∏Å
      if (conferenceCallRef && typeof conferenceCallRef.hangup === 'function') {
        await conferenceCallRef.hangup();
      }

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
      setIsInConference(false);
      setConferenceParticipants([]);
      setConferenceCallRef(null);
      setIsInCall(false);
      setCurrentCallRef(null);
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï audio mode
      AudioManager.resetAudioMode();
      
      setCallStatus('Conference ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      
      // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Softphone
      if (navigation) {
        navigation.navigate('Softphone');
      }
      
      console.log('‚úÖ Conference ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (error) {
      console.error('‚ùå Error ending conference:', error);
      setCallStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference');
      return false;
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ parent ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô ref
  useImperativeHandle(ref, () => ({
    startConference,
    addToConference,
    removeFromConference,
    endConference,
    bridgeConferenceMode,
    get isInConference() { return isInConference; },
    get conferenceParticipants() { return conferenceParticipants; }
  }), [startConference, addToConference, removeFromConference, endConference, bridgeConferenceMode, isInConference, conferenceParticipants]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢
  const openAddParticipantModal = () => {
    setShowConferenceModal(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal
  const closeModal = () => {
    setShowConferenceModal(false);
    setNewParticipantNumber('');
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢
  const confirmAddParticipant = () => {
    if (newParticipantNumber.trim()) {
      addToConference(newParticipantNumber.trim());
      closeModal();
    } else {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÉ‡∏ô conference ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
  const handleParticipantDisconnected = (callId) => {
    console.log(`üîÑ ‡∏™‡∏≤‡∏¢ ${callId} ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference`);
    
    // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
    setConferenceParticipants(prev => 
      prev.filter(p => p.id !== callId)
    );
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î conference
    if (conferenceParticipants.length <= 1) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô Conference ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
      endConference();
    }
  };

  // Effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏ô conference
  useEffect(() => {
    const ep = resolve(endpointRef);
    if (!ep || !ep.on) return;

    const handleCallChanged = (call) => {
      const callInfo = call?._callInfo || call;
      const state = callInfo?.state || call?.state;
      const callId = call?._callId || call?.id || call?.callId || 'unknown';

      if (state === 'PJSIP_INV_STATE_DISCONNECTED' || state === 'DISCONNECTED') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô conference ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const participant = conferenceParticipants.find(p => p.id === callId);
        if (participant) {
          handleParticipantDisconnected(callId);
        }
      }
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener
    ep.on('call_changed', handleCallChanged);

    // Cleanup
    return () => {
      if (ep && ep.removeListener) {
        ep.removeListener('call_changed', handleCallChanged);
      }
    };
  }, [endpointRef, conferenceParticipants]);

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô conference ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
  if (!isInConference) {
    return null;
  }

  return (
    <View style={styles.container}>
      {/* Conference Status */}
      <View style={styles.statusContainer}>
        <View style={styles.statusInfo}>
          <Text style={styles.statusText}>
            Conference ({conferenceParticipants.length} ‡∏™‡∏≤‡∏¢)
          </Text>
          <Text style={styles.participantNumbers}>
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: {conferenceParticipants.map(p => p.number).join(', ')}
          </Text>
        </View>
        <TouchableOpacity 
          style={styles.endConferenceButton}
          onPress={() => {
            Alert.alert(
              '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference',
              '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Conference ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
              [
                { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
                { text: '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î', onPress: endConference }
              ]
            );
          }}
        >
          <Text style={styles.endConferenceText}>‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</Text>
        </TouchableOpacity>
      </View>

      {/* Participants List */}
      <FlatList
        data={conferenceParticipants}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.participantRow}>
            <View style={styles.participantInfo}>
              <Text style={styles.participantNumber}>üìû {item.number}</Text>
              <Text style={styles.participantStatus}>
                {item.callRef && item.callRef.state ? 
                  (item.callRef.state === 'PJSIP_INV_STATE_CONFIRMED' ? 'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : 'üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠') : 
                  'üü¢ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
                }
              </Text>
            </View>
            <TouchableOpacity 
              style={styles.removeButton}
              onPress={() => {
                Alert.alert(
                  '‡∏•‡∏ö‡∏™‡∏≤‡∏¢',
                  `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${item.number} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Conference ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                  [
                    { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'cancel' },
                    { text: '‡∏•‡∏ö', onPress: () => removeFromConference(item) }
                  ]
                );
              }}
            >
              <Text style={styles.removeButtonText}>‚ùå</Text>
            </TouchableOpacity>
          </View>
        )}
        style={styles.participantsList}
      />

      {/* Add Participant Button */}
      <TouchableOpacity 
        style={styles.addButton}
        onPress={openAddParticipantModal}
      >
        <Text style={styles.addButtonText}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢</Text>
      </TouchableOpacity>

      {/* Add Participant Modal */}
      {showConferenceModal && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏¢‡πÉ‡∏ô Conference</Text>
            
            <TextInput
              style={styles.input}
              placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°"
              value={newParticipantNumber}
              onChangeText={setNewParticipantNumber}
              keyboardType="phone-pad"
            />
            
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={styles.cancelButton}
                onPress={closeModal}
              >
                <Text style={styles.cancelButtonText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.confirmButton}
                onPress={confirmAddParticipant}
              >
                <Text style={styles.confirmButtonText}>‡πÄ‡∏û‡∏¥‡πà‡∏°</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      )}
    </View>
  );
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1A1B1E',
    padding: 20,
  },
  statusContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
    backgroundColor: '#2A2B2E',
    padding: 15,
    borderRadius: 10,
  },
  statusInfo: {
    flex: 1,
  },
  statusText: {
    fontSize: 18,
    color: '#FFFFFF',
    fontWeight: 'bold',
    marginBottom: 4,
  },
  participantNumbers: {
    fontSize: 12,
    color: '#4A90E2',
    fontWeight: '500',
  },
  endConferenceButton: {
    backgroundColor: '#E63946',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
  },
  endConferenceText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  participantsList: {
    flex: 1,
    marginBottom: 20,
  },
  participantRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#2A2B2E',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderLeftWidth: 4,
    borderLeftColor: '#4A90E2',
  },
  participantInfo: {
    flex: 1,
  },
  participantNumber: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: 'bold',
    marginBottom: 4,
  },
  participantStatus: {
    fontSize: 12,
    color: '#B0B0B0',
  },
  participantText: {
    fontSize: 16,
    color: '#FFFFFF',
    flex: 1,
  },
  removeButton: {
    padding: 5,
  },
  removeButtonText: {
    fontSize: 16,
    color: '#E63946',
  },
  addButton: {
    backgroundColor: '#4A90E2',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#2A2B2E',
    borderRadius: 15,
    padding: 20,
    width: '80%',
  },
  modalTitle: {
    fontSize: 20,
    color: '#FFFFFF',
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
  },
  input: {
    backgroundColor: '#3A3B3E',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 20,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  cancelButton: {
    backgroundColor: '#6C757D',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 10,
    flex: 1,
    marginRight: 10,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  confirmButton: {
    backgroundColor: '#4A90E2',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 10,
    flex: 1,
    marginLeft: 10,
    alignItems: 'center',
  },
  confirmButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default ConferenceCallManager;