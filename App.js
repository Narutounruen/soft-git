import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Button,
  Alert,
  Platform,
  PermissionsAndroid,
  TouchableOpacity,
} from 'react-native';
import { Endpoint } from 'react-native-pjsip';
import 'react-native-gesture-handler';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import SoftphoneScreen from './SoftphoneScreen';
import CallingScreen from './CallingScreen';


function HomeScreen({ navigation, status, setStatus, isConnected, setIsConnected, setAccountRef, setEndpointRef, setCurrentCallRef, setIsInCall, setCallStatus, config, setConfig }) {
  // --- ‡∏¢‡πâ‡∏≤‡∏¢ state ‡πÅ‡∏•‡∏∞ ref ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
  const [isConnecting, setIsConnecting] = useState(false);
  const endpointRef = useRef(null);
  const accountRef = useRef(null);
  const currentCallRef = useRef(null);
  const connectionTimeoutRef = useRef(null);

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
const cleanup = async () => {
  try {
    setIsConnecting(false);
    setIsConnected(false);
    setIsInCall(false);
    setCallStatus('');
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout
    if (connectionTimeoutRef.current) {
      clearTimeout(connectionTimeoutRef.current);
      connectionTimeoutRef.current = null;
    }
    
    // ‡∏¢‡∏∏‡∏ï‡∏¥‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (currentCallRef.current) {
      try {
        await currentCallRef.current.hangup();
        currentCallRef.current = null;
      } catch (callError) {
        console.error('Hangup call error:', callError);
      }
    }
    
    if (endpointRef.current) {
      console.log('Starting cleanup...');
      
      // ‡∏•‡∏ö account ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
      if (accountRef.current) {
        try {
          console.log('Deleting account...');
          await endpointRef.current.deleteAccount(accountRef.current);
          console.log('Account deleted successfully');
          accountRef.current = null;
        } catch (accountError) {
          console.error('Delete account error:', accountError);
          accountRef.current = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
        }
      }
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ account deletion ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // ‡∏•‡∏ö listeners
      try {
        if (endpointRef.current.removeAllListeners) {
          endpointRef.current.removeAllListeners();
          console.log('Listeners removed');
        }
      } catch (listenerError) {
        console.error('Remove listeners error:', listenerError);
      }
      
      // ‡∏´‡∏¢‡∏∏‡∏î endpoint
      try {
        console.log('Stopping endpoint...');
        if (typeof endpointRef.current.stop === 'function') {
        await endpointRef.current.stop();
        console.log('Endpoint stopped successfully');
        } else {
          console.log('endpointRef.current.stop is not a function, skip stopping endpoint');
        }
      } catch (stopError) {
        console.error('Stop endpoint error:', stopError);
      }
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï endpoint ref
      endpointRef.current = null;
      console.log('Cleanup completed');
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ endpoint ‡∏Å‡πá‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs ‡πÄ‡∏â‡∏¢‡πÜ
      endpointRef.current = null;
      accountRef.current = null;
      currentCallRef.current = null;
      console.log('Simple cleanup completed');
    }
  } catch (error) {
    console.error('Cleanup error:', error);
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs ‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
    endpointRef.current = null;
    accountRef.current = null;
    currentCallRef.current = null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
const forceDisconnect = async () => {
  setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
  
  try {
    // ‡∏•‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
    await cleanup();
    
    // ‡∏ï‡∏±‡πâ‡∏á timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    setTimeout(() => {
      setIsConnecting(false);
      setIsConnected(false);
      setIsInCall(false);
      setCallStatus('');
      setStatus('‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
      
      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs
      endpointRef.current = null;
      accountRef.current = null;
      currentCallRef.current = null;
    }, 2000);
    
    setStatus('‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
  } catch (error) {
    console.error('Force disconnect error:', error);
    
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡πÅ‡∏°‡πâ‡∏à‡∏∞ error
    setIsConnecting(false);
    setIsConnected(false);
    setIsInCall(false);
    setCallStatus('');
    setStatus('‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï refs
    endpointRef.current = null;
    accountRef.current = null;
    currentCallRef.current = null;
  }
};
  // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const requestPermissions = async () => {
    if (Platform.OS === 'android') {
      const audioPermission = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.RECORD_AUDIO
      );
      if (audioPermission !== PermissionsAndroid.RESULTS.GRANTED) {
        throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå');
      }
    }
  };

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP
  const connectSIP = async () => {
    if (isConnecting) return;
    if (!config.domain || !config.username || !config.password) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
      return;
    }

    setIsConnecting(true);
    setIsConnected(false);
    setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
    await cleanup();

    try {
      // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
      await requestPermissions();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Endpoint
      endpointRef.current = new Endpoint();
      await endpointRef.current.start({
        userAgent: 'Simple SIP Client',
      });

      // ‡∏ï‡∏±‡πâ‡∏á timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      connectionTimeoutRef.current = setTimeout(() => {
        if (isConnecting) {
          handleConnectionTimeout();
        }
      }, 30000);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ events
      endpointRef.current.on('registration_changed', (registration) => {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ response
        if (connectionTimeoutRef.current) {
          clearTimeout(connectionTimeoutRef.current);
          connectionTimeoutRef.current = null;
        }

        const regData = registration?._registration || registration;
        const isActive = regData?._active || regData?.status === 'PJSIP_SC_OK';
        
        setIsConnecting(false);
        if (isActive) {
          setIsConnected(true);
          setStatus('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          setAccountRef(accountRef.current);
          setEndpointRef(endpointRef.current);
          navigation.navigate('Softphone'); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        } else {
          setIsConnected(false);
          const reason = regData?._reason || regData?._statusText || '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
          setStatus(`‚ùå ${reason}`);
        }
      });

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ call events
      endpointRef.current.on('call_received', (call) => {
        // Handle incoming calls if needed
        console.log('Incoming call:', call);
      });

      endpointRef.current.on('call_changed', (call) => {
        const callInfo = call?._callInfo || call;
        const state = callInfo?.state || call?.state;
        
        if (state === 'PJSIP_INV_STATE_CALLING') {
          setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£...');
        } else if (state === 'PJSIP_INV_STATE_EARLY') {
          setCallStatus('üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å...');
        } else if (state === 'PJSIP_INV_STATE_CONFIRMED') {
          setCallStatus('üìû ‡∏™‡∏≤‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
          setIsInCall(true);
        } else if (state === 'PJSIP_INV_STATE_DISCONNECTED') {
          setCallStatus('üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
          setIsInCall(false);
          setCurrentCallRef(null);
          setCurrentCallNumber('');
          setTimeout(() => setCallStatus(''), 2000);
        }
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Account
      const accountConfig = {
        username: config.username,
        domain: config.domain,
        password: config.password,
        proxy: `sip:${config.domain}:${config.port}`,
        transport: 'UDP',
        regOnAdd: true,
        stunServer: 'stun:stun.l.google.com:19302', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      };

      accountRef.current = await endpointRef.current.createAccount(accountConfig);

    } catch (error) {
      setIsConnecting(false);
      setIsConnected(false);
      setStatus(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      Alert.alert('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message);
      
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
      if (connectionTimeoutRef.current) {
        clearTimeout(connectionTimeoutRef.current);
        connectionTimeoutRef.current = null;
      }
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const handleConnectionTimeout = () => {
    setIsConnecting(false);
    setIsConnected(false);
    setStatus('‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    Alert.alert(
      '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      [{ text: '‡∏ï‡∏Å‡∏•‡∏á' }]
    );
    cleanup();
  };

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà)
  const cancelConnection = async () => {
    setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å...');
    await cleanup();
    setStatus('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß');
  };

  // ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const disconnect = async () => {
    await cleanup();
    setStatus('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  };



  return (
    <View style={styles.container}>
      <Text style={styles.title}>SIP Connector</Text>
      
      <TextInput
        style={styles.input}
        placeholder="IP Address"
        value={config.domain}
        onChangeText={(text) => setConfig({...config, domain: text})}
        editable={!isConnecting && !isConnected}
      />
      
      <TextInput
        style={styles.input}
        placeholder="Port (5060)"
        value={config.port}
        onChangeText={(text) => setConfig({...config, port: text})}
        keyboardType="numeric"
        editable={!isConnecting && !isConnected}
      />
      
      <TextInput
        style={styles.input}
        placeholder="Username"
        value={config.username}
        onChangeText={(text) => setConfig({...config, username: text})}
        editable={!isConnecting && !isConnected}
      />
      
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={config.password}
        onChangeText={(text) => setConfig({...config, password: text})}
        secureTextEntry
        editable={!isConnecting && !isConnected}
      />

      <View style={styles.buttonContainer}>
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
        {!isConnecting && !isConnected && (
          <Button 
            title="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" 
            onPress={connectSIP} 
          />
        )}
        
        {isConnecting && (
          <>
            <Button 
              title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..." 
              disabled={true}
            />
            <View style={styles.spacing} />
            <Button 
              title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" 
              onPress={cancelConnection} 
              color="#FF6B6B"
            />
          </>
        )}
        
        {!isConnecting && isConnected && (
          <Button 
            title="‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" 
            onPress={disconnect} 
            color="#FF6B6B"
          />
        )}
      </View>

      <View style={styles.statusContainer}>
        <Text style={styles.statusLabel}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</Text>
        <Text style={[
          styles.status,
          status.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') ? styles.success : 
          status.includes('‚ùå') ? styles.error : styles.default
        ]}>
          {status}
        </Text>
      </View>

    </View>
  );
}

const Stack = createStackNavigator();

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    paddingTop: 60,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 30,
    textAlign: 'center',
    color: '#333',
  },
  input: {
    height: 45,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    marginBottom: 15,
    paddingHorizontal: 15,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  buttonContainer: {
    marginVertical: 20,
  },
  spacing: {
    height: 10,
  },
  statusContainer: {
    marginTop: 20,
    padding: 15,
    backgroundColor: '#fff',
    borderRadius: 8,
  },
  statusLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333',
  },
  status: {
    fontSize: 16,
  },
  default: {
    color: '#666',
  },
  success: {
    color: '#27AE60',
    fontWeight: 'bold',
  },
  error: {
    color: '#E74C3C',
    fontWeight: 'bold',
  },

});

export default function App() {
  // State ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
  const [status, setStatus] = useState('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  const [isConnected, setIsConnected] = useState(false);
  const [accountRef, setAccountRef] = useState(null);
  const [endpointRef, setEndpointRef] = useState(null);
  const [currentCallRef, setCurrentCallRef] = useState(null);
  const [isInCall, setIsInCall] = useState(false);
  const [callStatus, setCallStatus] = useState('');
  const [currentCallNumber, setCurrentCallNumber] = useState('');
  const [config, setConfig] = useState({
    username: "1003",
    domain: "192.168.0.5",
    password: "con1003",
    port: "5060",
  });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å
  const makeCall = async (callNumber) => {
    if (!callNumber.trim()) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£');
      return;
    }

    if (!isConnected || !accountRef) {
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SIP ‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    try {
      setCallStatus('üìû ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏ó‡∏£...');
      setCurrentCallNumber(callNumber);
      const callUri = `sip:${callNumber}@${config.domain}`;
      const call = await endpointRef.makeCall(accountRef, callUri);
      setCurrentCallRef(call);
    } catch (error) {
      setCallStatus('‚ùå ‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ: ${error.message}`);
      setTimeout(() => setCallStatus(''), 3000);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢
  const hangupCall = async () => {
    if (currentCallRef && typeof currentCallRef.hangup === 'function') {
      try {
        await currentCallRef.hangup();
        setCallStatus('üìû ‡∏ß‡∏≤‡∏á‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        setIsInCall(false);
        setCurrentCallRef(null);
        setCurrentCallNumber('');
        setTimeout(() => setCallStatus(''), 2000);
      } catch (error) {
        console.error('Hangup error:', error);
      }
    } else {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á
      setCallStatus('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏á');
      setTimeout(() => setCallStatus(''), 2000);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ CallingScreen
  const navigateToCalling = () => {
    if (isInCall) {
      // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ navigation ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å state ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
      setTimeout(() => {
        // ‡∏´‡∏≤ navigation instance ‡∏à‡∏≤‡∏Å ref ‡∏´‡∏£‡∏∑‡∏≠ context
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
      }, 100);
    }
  };

  // ‡∏™‡πà‡∏á props ‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Softphone">
        <Stack.Screen
          name="Softphone"
          options={{ title: 'Softphone' }}
        >
          {props => (
            <SoftphoneScreen
              {...props}
              status={status}
              isConnected={isConnected}
              isInCall={isInCall}
              callStatus={callStatus}
              accountRef={accountRef}
              endpointRef={endpointRef}
              config={config}
              makeCall={makeCall}
              hangupCall={hangupCall}
              setCurrentCallNumber={setCurrentCallNumber}
              navigateToCalling={navigateToCalling}
            />
          )}
        </Stack.Screen>
        <Stack.Screen
          name="Calling"
          options={{ 
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏£',
            headerShown: false,
            gestureEnabled: false
          }}
        >
          {props => (
            <CallingScreen
              {...props}
              hangupCall={hangupCall}
              callStatus={callStatus}
              isInCall={isInCall}
              currentCallNumber={currentCallNumber}
            />
          )}
        </Stack.Screen>
        <Stack.Screen
          name="SIPConnector"
          options={{ title: 'SIP Connector' }}
        >
          {props => (
            <HomeScreen
              {...props}
              status={status}
              setStatus={setStatus}
              isConnected={isConnected}
              setIsConnected={setIsConnected}
              setAccountRef={setAccountRef}
              setEndpointRef={setEndpointRef}
              setCurrentCallRef={setCurrentCallRef}
              setIsInCall={setIsInCall}
              setCallStatus={setCallStatus}
              config={config}
              setConfig={setConfig}
            />
          )}
        </Stack.Screen>
      </Stack.Navigator>
    </NavigationContainer>
  );
}